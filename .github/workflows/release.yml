name: Release and Deploy

on:
  push:
    branches:
      - dev
      - staging
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - staging
          - main

jobs:
  # Environment setup
  determine_environment:
    name: Determine Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
    steps:
      - name: Set environment
        id: env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "environment=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

  # Version bumping and release creation
  version_and_release:
    name: Version and Release
    needs: [determine_environment]
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    outputs:
      version: ${{ steps.version.outputs.new_version }}
      tag: ${{ steps.version.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT }}
      - uses: actions/setup-node@v4
        with:
          node-version: "20.18.0"
      - run: npm ci
      - name: Configure Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
      - name: Bump version
        id: version
        run: |
          npx standard-version --message "chore(release): %s [skip ci]"
          echo "new_version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
          # Add environment suffix for staging and dev, but not for main
          if [ "${{ needs.determine_environment.outputs.environment }}" == "main" ]; then
            echo "tag=v$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
          else
            echo "tag=v$(node -p "require('./package.json').version")-${{ needs.determine_environment.outputs.environment }}" >> $GITHUB_OUTPUT
          fi
      - name: Push changes
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.PAT }}@github.com/${{ github.repository }}
          git push --follow-tags origin ${{ needs.determine_environment.outputs.environment }}
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          generate_release_notes: true
          token: ${{ secrets.PAT }}

  # Publish to npm
  publish_npm:
    name: Publish to npm
    needs: [determine_environment, version_and_release]
    if: ${{ needs.determine_environment.outputs.environment == 'main' && !contains(github.event.head_commit.message, '[skip ci]') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.version_and_release.outputs.tag }}
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.18.0"
          registry-url: "https://registry.npmjs.org"
      - name: Install dependencies
        run: npm ci
      - name: Build package
        run: npm run build
      - name: Check npm token
        id: check-npm-token
        run: |
          if [[ -z "${{ secrets.NPM_TOKEN }}" ]]; then
            echo "NPM_TOKEN is not set, skipping publish"
            echo "has_npm_token=false" >> $GITHUB_OUTPUT
          else
            echo "has_npm_token=true" >> $GITHUB_OUTPUT
          fi
      - name: Publish to npm
        if: steps.check-npm-token.outputs.has_npm_token == 'true'
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Notify on success
        if: steps.check-npm-token.outputs.has_npm_token == 'true'
        run: echo "Successfully published version ${{ needs.version_and_release.outputs.version }} to npm"

  # Create Jira Release
  jira_release:
    name: Create Jira Release
    runs-on: ubuntu-latest
    needs: [determine_environment, version_and_release]
    if: ${{ success() && !contains(github.event.head_commit.message, '[skip ci]') }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Check Jira Setup
        id: check_jira
        run: |
          # Set environment-specific webhook variable
          if [[ "${{ needs.determine_environment.outputs.environment }}" == "dev" ]]; then
            WEBHOOK="${JIRA_AUTOMATION_WEBHOOK_DEV}"
          elif [[ "${{ needs.determine_environment.outputs.environment }}" == "staging" ]]; then
            WEBHOOK="${JIRA_AUTOMATION_WEBHOOK_STAGING}"
          elif [[ "${{ needs.determine_environment.outputs.environment }}" == "main" ]]; then
            WEBHOOK="${JIRA_AUTOMATION_WEBHOOK_PRODUCTION}"
          fi

          # Check if webhook exists
          if [[ -z "${WEBHOOK}" ]]; then
            echo "has_jira_setup=false" >> $GITHUB_OUTPUT
            echo "webhook=" >> $GITHUB_OUTPUT
          else
            echo "has_jira_setup=true" >> $GITHUB_OUTPUT
            echo "webhook=${WEBHOOK}" >> $GITHUB_OUTPUT
          fi
        env:
          JIRA_AUTOMATION_WEBHOOK_DEV: ${{ secrets.JIRA_AUTOMATION_WEBHOOK_DEV }}
          JIRA_AUTOMATION_WEBHOOK_STAGING: ${{ secrets.JIRA_AUTOMATION_WEBHOOK_STAGING }}
          JIRA_AUTOMATION_WEBHOOK_PRODUCTION: ${{ secrets.JIRA_AUTOMATION_WEBHOOK_PRODUCTION }}
      - name: Create Jira Release
        if: steps.check_jira.outputs.has_jira_setup == 'true'
        uses: GeoWerkstatt/create-jira-release@v1
        continue-on-error: true
        with:
          jira-project-key: ${{ vars.JIRA_PROJECT_KEY }}
          jira-automation-webhook: ${{ secrets.JIRA_AUTOMATION_WEBHOOK }}
          build-version: "${{ github.event.repository.name }} (${{ needs.determine_environment.outputs.environment }}) v${{ needs.version_and_release.outputs.version }}"

  # Check if EAS is configured
  check_eas_setup:
    name: Check EAS Setup
    runs-on: ubuntu-latest
    needs: [determine_environment]
    outputs:
      has_eas_setup: ${{ steps.check.outputs.has_eas_setup }}
    steps:
      - id: check
        run: |
          if [[ -z "${EXPO_TOKEN}" ]]; then
            echo "has_eas_setup=false" >> $GITHUB_OUTPUT
          else
            echo "has_eas_setup=true" >> $GITHUB_OUTPUT
          fi
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

  # Trigger EAS Build if needed (only runs if app.config.ts changed)
  trigger_eas_build:
    name: Trigger EAS Build
    needs: [determine_environment, check_eas_setup, version_and_release]
    if: needs.check_eas_setup.outputs.has_eas_setup == 'true'
    uses: ./.github/workflows/build.yml
    with:
      environment: ${{ needs.determine_environment.outputs.environment }}
    secrets:
      EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

  # EAS Deploy/Publish
  eas_deploy:
    name: EAS Deploy
    runs-on: ubuntu-latest
    needs: [determine_environment, check_eas_setup, version_and_release]
    if: needs.check_eas_setup.outputs.has_eas_setup == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20.18.0"
      - name: Setup EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}
      - name: Set Env
        run: echo "PUPPETEER_SKIP_DOWNLOAD=true" >> $GITHUB_ENV
      - name: Install dependencies
        run: npm ci
      - name: Copy environment file
        uses: canastro/copy-file-action@master
        with:
          source: ".env.${{ needs.determine_environment.outputs.environment == 'main' && 'production' || needs.determine_environment.outputs.environment == 'dev' && 'development' || needs.determine_environment.outputs.environment}}"
          target: ".env"
      - name: Copy environment file for production
        if: needs.determine_environment.outputs.environment != 'main'
        uses: canastro/copy-file-action@master
        with:
          source: ".env.${{ needs.determine_environment.outputs.environment == 'dev' && 'development' || needs.determine_environment.outputs.environment }}"
          target: ".env.production"
      - name: Publish update
        run: STAGE=${{ needs.determine_environment.outputs.environment == 'main' && 'production' || needs.determine_environment.outputs.environment}} NODE_OPTIONS="--max-old-space-size=8192" npx eas update --auto --channel=${{ needs.determine_environment.outputs.environment == 'main' && 'production' || needs.determine_environment.outputs.environment}} --message="Update to v${{ needs.version_and_release.outputs.version }}"
      - name: Publish preview update
        run: STAGE=${{ needs.determine_environment.outputs.environment == 'main' && 'production' || needs.determine_environment.outputs.environment}} NODE_OPTIONS="--max-old-space-size=8192" npx eas update --channel=${{ needs.determine_environment.outputs.environment == 'main' && 'production' || needs.determine_environment.outputs.environment}}-preview --message="Preview update v${{ needs.version_and_release.outputs.version }}"
      - name: Check Sentry Token
        id: sentry-token
        run: |
          if [[ ! -z "${SENTRY_AUTH_TOKEN}" ]]; then
            echo "SENTRY_AUTH_TOKEN_SET=true" >> $GITHUB_ENV
          else
            echo "SENTRY_AUTH_TOKEN_SET=false" >> $GITHUB_ENV
          fi
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      - name: Upload sourcemaps to Sentry
        if: env.SENTRY_AUTH_TOKEN_SET == 'true'
        run: SENTRY_AUTH_TOKEN=${{secrets.SENTRY_AUTH_TOKEN}} npx sentry-expo-upload-sourcemaps dist

  # Check if Slack is configured
  check_slack_setup:
    name: Check Slack Setup
    runs-on: ubuntu-latest
    outputs:
      has_slack_setup: ${{ steps.check.outputs.has_slack_setup }}
    steps:
      - id: check
        run: |
          if [[ -z "${SLACK_BOT_TOKEN}" ]]; then
            echo "has_slack_setup=false" >> $GITHUB_OUTPUT
          else
            echo "has_slack_setup=true" >> $GITHUB_OUTPUT
          fi
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  # Notify via Slack
  notify:
    name: Notify via Slack
    runs-on: ubuntu-latest
    needs:
      [
        determine_environment,
        check_slack_setup,
        version_and_release,
        eas_deploy,
        trigger_eas_build,
        publish_npm,
      ]
    if: always() && needs.check_slack_setup.outputs.has_slack_setup == 'true'
    steps:
      - name: Update Via Slack
        id: slack
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ vars.SLACK_CHANNEL_ID }}
          payload: |
            {
              "blocks": [
              {
                "type": "header",
                "text":
                {
                  "type": "plain_text",
                  "text": "Release and Deploy: ${{ needs.determine_environment.outputs.environment }} (v${{ needs.version_and_release.outputs.version }})",
                  "emoji": true
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "<${{ github.event.head_commit.url }}|Status>: ${{ (needs.version_and_release.result == 'success' || needs.version_and_release.result == 'skipped') && ':white_check_mark: Version' || ':x: Version' }} | ${{ (needs.eas_deploy.result == 'success' || needs.eas_deploy.result == 'skipped') && ':white_check_mark: Mobile' || ':x: Mobile' }} | ${{ (needs.publish_npm.result == 'success' || needs.publish_npm.result == 'skipped') && ':white_check_mark: npm' || ':x: npm' }}"
                }
              }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  # Create Jira Issue on Failure
  create-issue-on-failure:
    name: Create Jira Issue on Failure
    needs:
      [
        determine_environment,
        version_and_release,
        trigger_eas_build,
        eas_deploy,
        publish_npm,
      ]
    if: ${{ failure() }}
    uses: ./.github/workflows/create-issue-on-failure.yml
    with:
      workflow_name: "Release and Deploy"
      failed_job: ${{ contains(needs.*.result, 'failure') && (needs.version_and_release.result == 'failure' && 'Version' || needs.trigger_eas_build.result == 'failure' && 'EAS Build' || needs.eas_deploy.result == 'failure' && 'EAS Deploy' || needs.publish_npm.result == 'failure' && 'NPM Publish' || 'Multiple Jobs') }}
      issue_type: "Bug"
      JIRA_BASE_URL: ${{ vars.JIRA_BASE_URL }}
      JIRA_USER_EMAIL: ${{ vars.JIRA_USER_EMAIL }}
      JIRA_PROJECT_KEY: ${{ vars.JIRA_PROJECT_KEY }}
    secrets:
      JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}