# Task ID: 5
# Title: Implement Command Shell MCP
# Status: pending
# Dependencies: None
# Priority: high
# Description: Create a Model Context Protocol that allows AI assistants to execute shell commands and retrieve the output.
# Details:
Implement a new MCP that provides a secure interface for executing shell commands:

1. Create a new MCP module for shell command execution
2. Implement security measures to prevent dangerous commands
3. Add configuration for allowed commands and directories
4. Capture and format command output for AI consumption
5. Handle errors and timeouts appropriately

Pseudo-code:
```javascript
class CommandShellMCP {
  constructor(config) {
    this.allowedCommands = config.allowedCommands || ['ls', 'cat', 'grep', 'find'];
    this.workingDirectory = config.workingDirectory || process.cwd();
    this.timeout = config.timeout || 5000; // 5 seconds default
  }

  isCommandAllowed(command) {
    const baseCommand = command.split(' ')[0];
    return this.allowedCommands.includes(baseCommand);
  }

  async executeCommand(command) {
    if (!this.isCommandAllowed(command)) {
      throw new Error(`Command not allowed: ${command}`);
    }

    return new Promise((resolve, reject) => {
      exec(command, { cwd: this.workingDirectory, timeout: this.timeout }, (error, stdout, stderr) => {
        if (error) {
          reject(error);
          return;
        }
        resolve({ stdout, stderr });
      });
    });
  }
}
```

# Test Strategy:
Create unit tests with mock child_process module. Test command validation, execution, timeout handling, and error scenarios. Verify security measures work correctly to prevent unauthorized commands.
