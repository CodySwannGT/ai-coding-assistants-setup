# This is an example deployment workflow that demonstrates the recommended pattern:
# 1. Call the release.yml workflow to create a release
# 2. Implement your custom deployment logic
# 3. Optionally run load tests for staging deployments
#
# The release.yml workflow is kept separate from deployment to allow:
# - Different deployment strategies per project (AWS, Azure, GCP, etc.)
# - Custom deployment logic without modifying the release workflow
# - Optional load testing based on environment
# - Flexibility to deploy the same release to multiple environments

name: 🚀 Release and Deploy

on:
  push:
    branches:
      - main
      - staging
      - dev
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - main
          - staging
          - dev

# Prevent concurrent runs of the same workflow on the same ref
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Environment setup
  determine_environment:
    name: 🌍 Determine Environment
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      environment: ${{ steps.env.outputs.environment }}
    steps:
      - name: 🔄 Set environment
        id: env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "environment=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

  # Step 1: Create a release
  release:
    name: 📦 Release
    uses: ./.github/workflows/release.yml
    needs: [determine_environment]
    with:
      environment: ${{ needs.determine_environment.outputs.environment }}
      release_strategy: 'semantic'
      skip_jobs: 'test:e2e,test:unit,test:integration,claude_security_scan,code_quality_check'
      require_approval: ${{ needs.determine_environment.outputs.environment == 'main' }}
      require_signatures: ${{ needs.determine_environment.outputs.environment == 'main' }}
      generate_sbom: true
      node_version: '20'
      package_manager: 'npm'
    secrets: inherit

  # Step 2: Deploy to AWS (Custom deployment logic)
  deploy:
    name: 🚀 Deploy to AWS
    needs: [determine_environment, release]
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write # needed to interact with GitHub's OIDC Token endpoint.
      contents: read
    outputs:
      deployment_id: ${{ steps.deploy.outputs.deployment_id }}
      environment_url: ${{ steps.deploy.outputs.environment_url }}
      deployment_status: ${{ steps.deploy.outputs.status }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build project
        run: npm run build
      
      - name: 🔧 Install CDK
        run: npm install -g aws-cdk

      - name: 🔑 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::017820663601:role/DeployServiceRole
          role-session-name: serverless-knowledge-deploy
          aws-region: us-east-1


      - name: 🚀 Deploy with CDK
        id: deploy
        run: |
          # Set environment based on branch
          ENVIRONMENT=${{ needs.determine_environment.outputs.environment }}
          
          # Map branch names to CDK context
          case $ENVIRONMENT in
            main)
              CDK_ENV="production"
              ENVIRONMENT_URL="https://app.example.com"
              ;;
            staging)
              CDK_ENV="staging"
              ENVIRONMENT_URL="https://staging.example.com"
              ;;
            dev)
              CDK_ENV="dev"
              ENVIRONMENT_URL="https://dev.example.com"
              ;;
            *)
              CDK_ENV="dev"
              ENVIRONMENT_URL="https://dev.example.com"
              ;;
          esac
          
          # Generate deployment ID
          DEPLOYMENT_ID="deploy-$(date +%Y%m%d%H%M%S)-${{ github.run_id }}"
          echo "deployment_id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
          echo "environment_url=$ENVIRONMENT_URL" >> $GITHUB_OUTPUT
          
          # Set AWS Account ID based on environment using secrets
          AWS_ACCOUNT_ID=${{ needs.determine_environment.outputs.environment == 'main' && secrets.AWS_ACCOUNT_ID_MAIN || needs.determine_environment.outputs.environment == 'staging' && secrets.AWS_ACCOUNT_ID_STAGING || secrets.AWS_ACCOUNT_ID_DEV }}
          
          # Display deployment configuration
          echo "🚀 Deploying with configuration:"
          echo "   Environment: $CDK_ENV"
          echo "   Account: $AWS_ACCOUNT_ID"
          echo "   AWS Region: us-east-1"
          echo "   Deployment ID: $DEPLOYMENT_ID"
          
          # Configure CDK
          export CDK_DEFAULT_ACCOUNT=$AWS_ACCOUNT_ID
          export CDK_DEFAULT_REGION=us-east-1
          
          # First synthesize to generate CloudFormation templates
          echo "📋 Synthesizing CloudFormation templates..."
          npx cdk synth --all \
            --context env=$CDK_ENV \
            --context ${CDK_ENV}-account=$AWS_ACCOUNT_ID \
            --quiet
          
          # Deploy with CDK
          echo "📦 Starting CDK deployment..."
          echo ""
          
          npx cdk deploy --all \
            --context env=$CDK_ENV \
            --context ${CDK_ENV}-account=$AWS_ACCOUNT_ID \
            --require-approval never \
            --verbose || {
              # If deployment fails due to missing bootstrap, provide instructions
              EXIT_CODE=$?
              if grep -q "This stack uses assets" <<< "$OUTPUT" || grep -q "CDKToolkit" <<< "$OUTPUT"; then
                echo ""
                echo "❌ Deployment failed - CDK bootstrap required"
                echo ""
                echo "The AWS account needs to be bootstrapped for CDK deployments."
                echo "Please run the following command locally with appropriate credentials:"
                echo ""
                echo "export AWS_PROFILE=gemini-dev-v2"
                echo "npx cdk bootstrap aws://$AWS_ACCOUNT_ID/us-east-1"
                echo ""
                echo "Then re-run this workflow."
              fi
              echo "status=failed" >> $GITHUB_OUTPUT
              exit $EXIT_CODE
            }
          
          # Set success status
          echo "status=success" >> $GITHUB_OUTPUT
        env:
          LANGSMITH_API_KEY: ${{ secrets.LANGSMITH_API_KEY }}
          LANGSMITH_TRACING: ${{ secrets.LANGSMITH_TRACING }}
          LANGSMITH_PROJECT: ${{ secrets.LANGSMITH_PROJECT }}
          LANGSMITH_ENDPOINT: ${{ secrets.LANGSMITH_ENDPOINT || 'https://api.smith.langchain.com' }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: 📢 Notify on success
        run: echo "Successfully deployed version ${{ needs.release.outputs.version }} to ${{ needs.determine_environment.outputs.environment }}"

  # Step 3: Load testing for staging deployments
  load_testing:
    name: 🔍 Load Testing
    needs: [determine_environment, release, deploy]
    if: |
      always() && 
      !cancelled() && 
      needs.deploy.result == 'success' && 
      (needs.determine_environment.outputs.environment == 'staging' || needs.determine_environment.outputs.environment == 'stage')
    uses: ./.github/workflows/load-test.yml
    with:
      environment: ${{ needs.determine_environment.outputs.environment }}
      test_scenario: 'smoke'  # Start with smoke test after deployment
      base_url: ${{ needs.deploy.outputs.environment_url }}
      test_duration: '5m'
      virtual_users: 50
      fail_on_threshold: false  # Don't fail the release if load test fails
      upload_results: true
    secrets: inherit

  # Post-deployment monitoring (optional)
  post_deployment_monitoring:
    name: 📊 Post-Deployment Monitoring
    needs: [determine_environment, release, deploy, load_testing]
    if: |
      always() && 
      !cancelled() && 
      needs.deploy.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Monitor Deployment Health
        run: |
          echo "## 📊 Post-Deployment Monitoring" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ needs.determine_environment.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment Status**: ${{ needs.deploy.outputs.deployment_status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment URL**: ${{ needs.deploy.outputs.environment_url }}" >> $GITHUB_STEP_SUMMARY
          
          # Add load test results for staging
          if [[ "${{ needs.determine_environment.outputs.environment }}" == "staging" || "${{ needs.determine_environment.outputs.environment }}" == "stage" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔍 Load Test Results" >> $GITHUB_STEP_SUMMARY
            echo "- **Test Scenario**: smoke" >> $GITHUB_STEP_SUMMARY
            echo "- **Duration**: 5m" >> $GITHUB_STEP_SUMMARY
            echo "- **Virtual Users**: 50" >> $GITHUB_STEP_SUMMARY
            echo "- **Status**: ${{ needs.load_testing.result }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Add monitoring checks here
          # - Check application metrics
          # - Verify error rates
          # - Monitor response times
          # - Check resource utilization
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Post-deployment monitoring complete" >> $GITHUB_STEP_SUMMARY
          
          # Basic health check (uncomment and customize)
          # curl -f ${{ needs.deploy.outputs.environment_url }}/health || echo "Health check failed"

  create_sentry_issue_on_failure:
    name: 🚨 Create Sentry Issue on Failure
    needs: [release, deploy]
    if: ${{ failure() && !contains(github.event.head_commit.message, '[skip ci]') }}
    uses: ./.github/workflows/create-sentry-issue-on-failure.yml
    with:
      workflow_name: 'Release and Deploy'
      failed_job: ${{ needs.release.result == 'failure' && 'release' || 'deploy' }}
      SENTRY_ORG: ${{ vars.SENTRY_ORG }}
      SENTRY_PROJECT: ${{ vars.SENTRY_PROJECT }}
    secrets: inherit
