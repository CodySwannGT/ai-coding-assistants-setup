{
  "tasks": [
    {
      "id": 1,
      "title": "Implement GitHub Copilot Detection",
      "description": "Add functionality to detect existing GitHub Copilot installations in the user's VS Code environment.",
      "details": "Create a utility function that checks for the presence of GitHub Copilot extension in VS Code. This can be done by examining the extensions directory or using VS Code's extension API if available.\n\nPseudo-code:\n```javascript\nfunction detectCopilot() {\n  // Check common extension paths\n  const extensionPath = path.join(getUserHome(), '.vscode', 'extensions');\n  const copilotExtensions = fs.readdirSync(extensionPath)\n    .filter(ext => ext.startsWith('github.copilot'));\n  \n  return copilotExtensions.length > 0;\n}\n```\n\nIntegrate this detection into the initial setup flow to inform users if Copilot is already installed.",
      "testStrategy": "Create unit tests with mock filesystem to verify detection logic works correctly. Test with various scenarios (Copilot installed, not installed, different versions).",
      "priority": "high",
      "dependencies": [],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 2,
      "title": "Add Copilot Override Configuration",
      "description": "Implement functionality to disable or override GitHub Copilot when using other AI assistants.",
      "details": "Create configuration options that allow users to:\n1. Temporarily disable Copilot when using Claude or Roo\n2. Set preferences for which AI assistant to use by default\n\nImplementation should modify VS Code settings.json to toggle Copilot's enabled state:\n\n```javascript\nfunction toggleCopilot(enable) {\n  const settingsPath = path.join(getUserHome(), '.config', 'Code', 'User', 'settings.json');\n  const settings = JSON.parse(fs.readFileSync(settingsPath, 'utf8'));\n  \n  settings['github.copilot.enabled'] = enable;\n  \n  fs.writeFileSync(settingsPath, JSON.stringify(settings, null, 2));\n}\n```\n\nAdd this as an option in the CLI setup process.",
      "testStrategy": "Test with mock settings file to ensure proper modification. Verify that settings are correctly updated and restored. Test edge cases like missing settings file or malformed JSON.",
      "priority": "medium",
      "dependencies": [
        1
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 3,
      "title": "Update Documentation for AI Tool Comparison",
      "description": "Update documentation to clarify differences between Claude, Roo, and Copilot, helping users choose the appropriate tool.",
      "details": "Create a new markdown document that compares the three AI coding assistants:\n\n1. Create a comparison table with features, strengths, and limitations\n2. Add usage recommendations for different scenarios\n3. Include information about how the tools can be used together\n4. Add screenshots of each tool in action\n\nThe document should be placed in the docs/ directory and linked from the main README.md. Include information about the new Copilot detection and override features.",
      "testStrategy": "Review documentation for accuracy, clarity, and completeness. Have multiple team members review the documentation. Verify all links work correctly.",
      "priority": "medium",
      "dependencies": [
        1,
        2
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 4,
      "title": "Implement StackOverflow Search MCP",
      "description": "Create a Model Context Protocol (MCP) that allows AI assistants to search StackOverflow for relevant information.",
      "details": "Implement a new MCP that interfaces with StackOverflow's API to search for questions and answers:\n\n1. Create a new MCP module in the appropriate directory\n2. Implement authentication with StackOverflow API (if required)\n3. Create search functionality that accepts query parameters\n4. Format results in a way that's useful for AI assistants\n5. Add proper error handling and rate limiting\n\nPseudo-code:\n```javascript\nclass StackOverflowMCP {\n  constructor(config) {\n    this.apiKey = config.apiKey;\n    this.baseUrl = 'https://api.stackexchange.com/2.3';\n  }\n\n  async search(query, tags = [], limit = 5) {\n    const response = await fetch(`${this.baseUrl}/search?order=desc&sort=relevance&intitle=${encodeURIComponent(query)}&site=stackoverflow&key=${this.apiKey}`);\n    const data = await response.json();\n    return data.items.slice(0, limit).map(item => ({\n      title: item.title,\n      link: item.link,\n      score: item.score,\n      answerCount: item.answer_count,\n      isAnswered: item.is_answered\n    }));\n  }\n}\n```",
      "testStrategy": "Write unit tests that mock the StackOverflow API responses. Test various search queries, error conditions, and rate limiting scenarios. Verify the formatting of results is consistent.",
      "priority": "high",
      "dependencies": [],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 5,
      "title": "Implement Command Shell MCP",
      "description": "Create a Model Context Protocol that allows AI assistants to execute shell commands and retrieve the output.",
      "details": "Implement a new MCP that provides a secure interface for executing shell commands:\n\n1. Create a new MCP module for shell command execution\n2. Implement security measures to prevent dangerous commands\n3. Add configuration for allowed commands and directories\n4. Capture and format command output for AI consumption\n5. Handle errors and timeouts appropriately\n\nPseudo-code:\n```javascript\nclass CommandShellMCP {\n  constructor(config) {\n    this.allowedCommands = config.allowedCommands || ['ls', 'cat', 'grep', 'find'];\n    this.workingDirectory = config.workingDirectory || process.cwd();\n    this.timeout = config.timeout || 5000; // 5 seconds default\n  }\n\n  isCommandAllowed(command) {\n    const baseCommand = command.split(' ')[0];\n    return this.allowedCommands.includes(baseCommand);\n  }\n\n  async executeCommand(command) {\n    if (!this.isCommandAllowed(command)) {\n      throw new Error(`Command not allowed: ${command}`);\n    }\n\n    return new Promise((resolve, reject) => {\n      exec(command, { cwd: this.workingDirectory, timeout: this.timeout }, (error, stdout, stderr) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n        resolve({ stdout, stderr });\n      });\n    });\n  }\n}\n```",
      "testStrategy": "Create unit tests with mock child_process module. Test command validation, execution, timeout handling, and error scenarios. Verify security measures work correctly to prevent unauthorized commands.",
      "priority": "high",
      "dependencies": [],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 6,
      "title": "Implement Database Query MCP",
      "description": "Create a Model Context Protocol that allows AI assistants to query databases and retrieve results.",
      "details": "Implement a new MCP that provides a secure interface for database queries:\n\n1. Create a new MCP module for database queries\n2. Support multiple database types (MySQL, PostgreSQL, SQLite)\n3. Implement connection pooling and query sanitization\n4. Add configuration for database credentials and connection limits\n5. Format query results for AI consumption\n\nPseudo-code:\n```javascript\nclass DatabaseQueryMCP {\n  constructor(config) {\n    this.dbType = config.dbType; // 'mysql', 'postgres', 'sqlite'\n    this.connection = this.createConnection(config);\n    this.queryTimeout = config.queryTimeout || 5000;\n  }\n\n  createConnection(config) {\n    switch(this.dbType) {\n      case 'mysql':\n        return mysql.createPool({\n          host: config.host,\n          user: config.user,\n          password: config.password,\n          database: config.database,\n          connectionLimit: config.connectionLimit || 10\n        });\n      case 'postgres':\n        // Similar implementation for PostgreSQL\n      case 'sqlite':\n        // Similar implementation for SQLite\n      default:\n        throw new Error(`Unsupported database type: ${this.dbType}`);\n    }\n  }\n\n  async executeQuery(query, params = []) {\n    // Implement query sanitization\n    const sanitizedQuery = this.sanitizeQuery(query);\n    \n    return new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        reject(new Error('Query timeout'));\n      }, this.queryTimeout);\n\n      this.connection.query(sanitizedQuery, params, (error, results) => {\n        clearTimeout(timeout);\n        if (error) {\n          reject(error);\n          return;\n        }\n        resolve(results);\n      });\n    });\n  }\n\n  sanitizeQuery(query) {\n    // Implement query sanitization logic\n    return query;\n  }\n}\n```",
      "testStrategy": "Create unit tests with mock database drivers. Test connection handling, query execution, result formatting, and error scenarios. Test with different database types and configurations.",
      "priority": "medium",
      "dependencies": [],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 7,
      "title": "Implement Embedding Search MCP",
      "description": "Create a Model Context Protocol that allows AI assistants to search vector databases like Weaviate or Chroma.",
      "details": "Implement a new MCP that interfaces with vector databases for semantic search:\n\n1. Create a new MCP module for embedding search\n2. Support both Weaviate and Chroma databases\n3. Implement vector query construction and result parsing\n4. Add configuration for database connection and search parameters\n5. Format search results for AI consumption\n\nPseudo-code:\n```javascript\nclass EmbeddingSearchMCP {\n  constructor(config) {\n    this.dbType = config.dbType; // 'weaviate' or 'chroma'\n    this.client = this.createClient(config);\n    this.defaultLimit = config.defaultLimit || 5;\n  }\n\n  createClient(config) {\n    switch(this.dbType) {\n      case 'weaviate':\n        return weaviate.client({\n          scheme: config.scheme || 'http',\n          host: config.host || 'localhost:8080',\n        });\n      case 'chroma':\n        return new ChromaClient({\n          path: config.path || 'http://localhost:8000'\n        });\n      default:\n        throw new Error(`Unsupported vector database type: ${this.dbType}`);\n    }\n  }\n\n  async search(query, collection, limit = this.defaultLimit) {\n    if (this.dbType === 'weaviate') {\n      return this.searchWeaviate(query, collection, limit);\n    } else if (this.dbType === 'chroma') {\n      return this.searchChroma(query, collection, limit);\n    }\n  }\n\n  async searchWeaviate(query, className, limit) {\n    // Implement Weaviate search\n  }\n\n  async searchChroma(query, collectionName, limit) {\n    // Implement Chroma search\n  }\n}\n```",
      "testStrategy": "Create unit tests with mock vector database clients. Test search functionality, result formatting, and error handling. Test with different vector database types and configurations.",
      "priority": "medium",
      "dependencies": [],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 8,
      "title": "Update Configuration Files for New MCPs",
      "description": "Update configuration files and documentation to include the newly added Model Context Protocols.",
      "details": "Update configuration files to include settings for the new MCPs:\n\n1. Add configuration templates for each new MCP\n2. Update the configuration schema to include new options\n3. Add validation for the new configuration options\n4. Update the configuration generation logic in the CLI\n5. Add documentation for each configuration option\n\nExample configuration additions:\n```javascript\n// Add to config schema\nconst configSchema = {\n  // Existing schema\n  mcps: {\n    stackOverflow: {\n      enabled: Boolean,\n      apiKey: String,\n      // Other options\n    },\n    commandShell: {\n      enabled: Boolean,\n      allowedCommands: Array,\n      workingDirectory: String,\n      timeout: Number,\n    },\n    // Other MCPs\n  }\n};\n\n// Update config generation\nfunction generateConfig(userInputs) {\n  // Existing logic\n  \n  if (userInputs.enableStackOverflowMCP) {\n    config.mcps.stackOverflow = {\n      enabled: true,\n      apiKey: userInputs.stackOverflowApiKey,\n      // Other options\n    };\n  }\n  \n  // Other MCPs\n  \n  return config;\n}\n```",
      "testStrategy": "Test configuration generation with various combinations of MCP settings. Verify that the generated configuration is valid according to the schema. Test with both complete and partial configurations.",
      "priority": "medium",
      "dependencies": [
        4,
        5,
        6,
        7
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 9,
      "title": "Modularize CLI Script",
      "description": "Refactor the CLI script into smaller, more maintainable components to improve contributor friendliness.",
      "details": "Refactor the CLI script into a modular structure:\n\n1. Create a directory structure for CLI components\n2. Split functionality into logical modules (e.g., config, installation, detection)\n3. Implement a plugin system for extensibility\n4. Add proper error handling and logging\n5. Improve command-line argument parsing\n\nProposed directory structure:\n```\nsrc/\n  cli/\n    index.js       # Main entry point\n    commands/      # Command implementations\n      install.js\n      configure.js\n      detect.js\n    utils/         # Utility functions\n      config.js\n      detection.js\n      installation.js\n    plugins/       # Plugin system\n      plugin-loader.js\n```\n\nImplement a command pattern for CLI operations:\n```javascript\n// src/cli/index.js\nconst yargs = require('yargs');\nconst installCommand = require('./commands/install');\nconst configureCommand = require('./commands/configure');\n\nyargs\n  .command(installCommand)\n  .command(configureCommand)\n  .demandCommand(1, 'You need to specify a command')\n  .help()\n  .argv;\n```",
      "testStrategy": "Create unit tests for each module. Test command execution, error handling, and integration between modules. Use mock objects for external dependencies. Test with various command-line arguments and configurations.",
      "priority": "high",
      "dependencies": [],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 10,
      "title": "Enhance Project Documentation",
      "description": "Improve README, add prerequisites, and enhance CONTRIBUTING.md to make the project more contributor-friendly.",
      "details": "Enhance project documentation:\n\n1. Update README.md with clear installation and usage instructions\n2. Add a prerequisites section listing all required software and dependencies\n3. Create or enhance CONTRIBUTING.md with detailed contribution guidelines\n4. Add documentation for the modular CLI structure\n5. Include troubleshooting section and FAQ\n\nREADME.md should include:\n- Project overview and purpose\n- Prerequisites (Node.js version, VS Code version, etc.)\n- Installation instructions\n- Usage examples\n- Configuration options\n- Troubleshooting\n\nCONTRIBUTING.md should include:\n- Development setup instructions\n- Code style guidelines\n- Pull request process\n- Testing requirements\n- Documentation requirements",
      "testStrategy": "Review documentation for accuracy, clarity, and completeness. Verify all links work correctly. Have new contributors attempt to follow the documentation to identify any gaps or unclear instructions.",
      "priority": "medium",
      "dependencies": [
        9
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 11,
      "title": "Add CI with GitHub Actions",
      "description": "Set up continuous integration using GitHub Actions to automate testing and validation.",
      "details": "Implement GitHub Actions workflows for CI:\n\n1. Create a workflow for running tests on pull requests and pushes to main\n2. Add linting and code style checking\n3. Implement automated documentation generation\n4. Add status badges to README.md\n5. Configure notifications for workflow failures\n\nCreate a .github/workflows directory with the following files:\n\n```yaml\n# .github/workflows/test.yml\nname: Test\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        node-version: [14.x, 16.x, 18.x]\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Use Node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@v3\n      with:\n        node-version: ${{ matrix.node-version }}\n        cache: 'npm'\n    - run: npm ci\n    - run: npm run lint\n    - run: npm test\n```\n\n```yaml\n# .github/workflows/docs.yml\nname: Documentation\n\non:\n  push:\n    branches: [ main ]\n\njobs:\n  docs:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Use Node.js\n      uses: actions/setup-node@v3\n      with:\n        node-version: '16.x'\n        cache: 'npm'\n    - run: npm ci\n    - run: npm run docs\n    # Add steps to publish documentation if needed\n```",
      "testStrategy": "Test GitHub Actions workflows locally using act or similar tools. Verify that workflows run correctly with different Node.js versions. Test with both passing and failing tests to ensure proper reporting.",
      "priority": "medium",
      "dependencies": [
        9
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 12,
      "title": "Implement Basic Tests",
      "description": "Add snapshot or functional tests for config generation and other key functionality.",
      "details": "Implement a testing framework and basic tests:\n\n1. Set up Jest or another testing framework\n2. Create snapshot tests for configuration generation\n3. Implement functional tests for key CLI operations\n4. Create test fixtures and mocks for external dependencies\n5. Add test coverage reporting\n\nExample test implementation:\n```javascript\n// tests/config.test.js\nconst { generateConfig } = require('../src/utils/config');\n\ndescribe('Configuration Generation', () => {\n  test('generates default configuration', () => {\n    const userInputs = {\n      projectPath: '/test/project',\n      enabledMCPs: ['filesystem']\n    };\n    \n    const config = generateConfig(userInputs);\n    \n    expect(config).toMatchSnapshot();\n    expect(config.mcps.filesystem.enabled).toBe(true);\n  });\n  \n  test('includes new MCPs when enabled', () => {\n    const userInputs = {\n      projectPath: '/test/project',\n      enabledMCPs: ['filesystem', 'stackOverflow'],\n      stackOverflowApiKey: 'test-key'\n    };\n    \n    const config = generateConfig(userInputs);\n    \n    expect(config.mcps.stackOverflow.enabled).toBe(true);\n    expect(config.mcps.stackOverflow.apiKey).toBe('test-key');\n  });\n});\n```\n\nUpdate package.json with test scripts:\n```json\n{\n  \"scripts\": {\n    \"test\": \"jest\",\n    \"test:coverage\": \"jest --coverage\"\n  }\n}\n```",
      "testStrategy": "Run tests in CI environment to ensure consistency. Verify that test coverage meets minimum thresholds. Test with different Node.js versions to ensure compatibility.",
      "priority": "high",
      "dependencies": [
        9
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 13,
      "title": "Create MCP Documentation Table",
      "description": "Create a comprehensive table of all supported MCPs, including purpose and requirements.",
      "details": "Create a markdown document with a comprehensive table of all supported MCPs:\n\n1. List all MCPs with their names, descriptions, and purposes\n2. Include requirements and dependencies for each MCP\n3. Add configuration options and examples\n4. Include usage examples and code snippets\n5. Add troubleshooting information\n\nExample table structure:\n```markdown\n# Model Context Protocols (MCPs)\n\nThis document provides information about all supported Model Context Protocols (MCPs) in the AI Coding Tool.\n\n## Overview\n\nMCPs allow AI assistants to access external information and perform actions beyond their training data.\n\n## Supported MCPs\n\n| MCP Name | Purpose | Requirements | Configuration |\n|----------|---------|--------------|---------------|\n| Filesystem | Access and modify files in the workspace | None | `{ \"enabled\": true, \"rootDir\": \"./\" }` |\n| StackOverflow | Search StackOverflow for code examples and solutions | API Key | `{ \"enabled\": true, \"apiKey\": \"your-api-key\" }` |\n| Command Shell | Execute shell commands and capture output | None | `{ \"enabled\": true, \"allowedCommands\": [\"ls\", \"cat\"] }` |\n| Database Query | Query databases and retrieve results | Database credentials | `{ \"enabled\": true, \"dbType\": \"mysql\", ... }` |\n| Embedding Search | Search vector databases for semantic information | Vector database | `{ \"enabled\": true, \"dbType\": \"weaviate\", ... }` |\n\n## Detailed Configuration\n\n### Filesystem MCP\n...\n```\n\nIntegrate this documentation into the project's docs directory and link it from the main README.md.",
      "testStrategy": "Review documentation for accuracy, clarity, and completeness. Verify all configuration examples are valid and up-to-date. Have team members review the documentation for technical accuracy.",
      "priority": "medium",
      "dependencies": [
        4,
        5,
        6,
        7,
        8
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 14,
      "title": "Implement Git Hook Support",
      "description": "Add Git hook support using Husky or lint-staged to run Claude for code review on commits.",
      "details": "Implement Git hooks for AI code review:\n\n1. Add Husky for Git hook management\n2. Configure pre-commit hooks to run Claude for code review\n3. Add configuration options for review strictness\n4. Implement a mechanism to bypass hooks when needed\n5. Add documentation for Git hook usage\n\nImplementation steps:\n\n1. Install dependencies:\n```bash\nnpm install --save-dev husky lint-staged\n```\n\n2. Configure Husky in package.json:\n```json\n{\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"lint-staged\"\n    }\n  },\n  \"lint-staged\": {\n    \"*.{js,jsx,ts,tsx}\": [\n      \"node scripts/claude-review.js\"\n    ]\n  }\n}\n```\n\n3. Create the Claude review script:\n```javascript\n// scripts/claude-review.js\nconst { execSync } = require('child_process');\nconst fs = require('fs');\nconst path = require('path');\n\n// Get staged files\nconst stagedFiles = process.argv.slice(2);\n\n// Read configuration\nconst configPath = path.join(process.cwd(), '.claude-review.json');\nconst config = fs.existsSync(configPath) \n  ? JSON.parse(fs.readFileSync(configPath, 'utf8'))\n  : { strictness: 'medium' };\n\n// Process each file\nstagedFiles.forEach(file => {\n  const content = fs.readFileSync(file, 'utf8');\n  \n  // Call Claude API for review\n  const review = callClaudeAPI(content, config.strictness);\n  \n  // Process review results\n  if (review.issues.length > 0) {\n    console.log(`Issues found in ${file}:`);\n    review.issues.forEach(issue => {\n      console.log(`- ${issue.message} (line ${issue.line})`);\n    });\n    \n    if (config.strictness === 'high') {\n      process.exit(1); // Fail the commit\n    }\n  }\n});\n\nfunction callClaudeAPI(content, strictness) {\n  // Implementation of Claude API call\n  // This would use the appropriate API client to send the code for review\n  // and return the results in a structured format\n}\n```\n\n4. Add configuration file template:\n```json\n// .claude-review.json\n{\n  \"strictness\": \"medium\", // \"low\", \"medium\", or \"high\"\n  \"ignorePatterns\": [\"dist/**\", \"node_modules/**\"],\n  \"customPrompt\": \"Review this code for bugs and improvements:\"\n}\n```",
      "testStrategy": "Test Git hooks with various code changes to verify they run correctly. Test with different strictness levels to ensure appropriate behavior. Create mock Claude API responses for testing without actual API calls.",
      "priority": "medium",
      "dependencies": [],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 15,
      "title": "Add Support for Non-JavaScript Repositories",
      "description": "Modify the project to work with non-JavaScript repositories by implementing language detection and graceful fallbacks.",
      "details": "Implement support for non-JavaScript repositories:\n\n1. Modify project root detection to work without package.json\n2. Implement language detection for Python, Ruby, Shell, and other languages\n3. Create graceful fallbacks for functions that rely on package.json\n4. Add CLI flags for specifying project type\n5. Update error handling to be more informative\n\nImplementation steps:\n\n1. Create a language detection module:\n```javascript\n// src/utils/language-detection.js\nconst fs = require('fs');\nconst path = require('path');\n\nfunction detectLanguage(projectPath) {\n  // Check for language-specific files\n  if (fs.existsSync(path.join(projectPath, 'package.json'))) {\n    return 'javascript';\n  }\n  if (fs.existsSync(path.join(projectPath, 'requirements.txt')) || \n      fs.existsSync(path.join(projectPath, 'setup.py'))) {\n    return 'python';\n  }\n  if (fs.existsSync(path.join(projectPath, 'Gemfile'))) {\n    return 'ruby';\n  }\n  \n  // Count file extensions\n  const fileExtensions = countFileExtensions(projectPath);\n  const dominantExtension = findDominantExtension(fileExtensions);\n  \n  // Map extension to language\n  const extensionMap = {\n    'js': 'javascript',\n    'py': 'python',\n    'rb': 'ruby',\n    'sh': 'shell',\n    // Add more mappings\n  };\n  \n  return extensionMap[dominantExtension] || 'unknown';\n}\n\nfunction countFileExtensions(dir) {\n  // Implementation to count file extensions recursively\n}\n\nfunction findDominantExtension(extensionCounts) {\n  // Find the most common extension\n}\n\nmodule.exports = { detectLanguage };\n```\n\n2. Modify project root detection:\n```javascript\n// src/utils/project.js\nconst fs = require('fs');\nconst path = require('path');\n\nfunction findProjectRoot(startPath) {\n  let currentPath = startPath;\n  \n  while (currentPath !== '/') {\n    // Check for common project root indicators\n    if (fs.existsSync(path.join(currentPath, 'package.json')) ||\n        fs.existsSync(path.join(currentPath, '.git')) ||\n        fs.existsSync(path.join(currentPath, 'requirements.txt')) ||\n        fs.existsSync(path.join(currentPath, 'Gemfile'))) {\n      return currentPath;\n    }\n    \n    currentPath = path.dirname(currentPath);\n  }\n  \n  // If no root found, return the starting path\n  return startPath;\n}\n\nmodule.exports = { findProjectRoot };\n```\n\n3. Add CLI flags for project type:\n```javascript\n// src/cli/index.js\nyargs\n  .option('project-type', {\n    alias: 't',\n    describe: 'Specify the project type',\n    choices: ['javascript', 'python', 'ruby', 'shell', 'other'],\n  })\n  // Other options\n```\n\n4. Update configuration generation to handle different project types:\n```javascript\n// src/utils/config.js\nfunction generateConfig(userInputs) {\n  const projectType = userInputs.projectType || detectLanguage(userInputs.projectPath);\n  \n  const config = {\n    projectType,\n    // Base configuration\n  };\n  \n  // Add language-specific configuration\n  switch (projectType) {\n    case 'javascript':\n      // JavaScript-specific config\n      break;\n    case 'python':\n      // Python-specific config\n      break;\n    // Other languages\n  }\n  \n  return config;\n}\n```",
      "testStrategy": "Create test fixtures for different project types. Test language detection with various repository structures. Test configuration generation for each supported language. Verify graceful fallbacks work correctly when language-specific features are not available.",
      "priority": "high",
      "dependencies": [
        9
      ],
      "status": "pending",
      "subtasks": [
        {
          "id": 1,
          "title": "Create Language Detection Module",
          "description": "Implement a module that can detect the primary programming language of a repository based on file extensions and common project files.",
          "dependencies": [],
          "details": "Create src/utils/language-detection.js with functions to scan directories, count file extensions, and identify language-specific files like requirements.txt (Python), Gemfile (Ruby), etc. Implement the detectLanguage function that returns the primary language based on these indicators. Include support for JavaScript, Python, Ruby, Shell, and a fallback for unknown languages.",
          "status": "pending",
          "testStrategy": "Write unit tests with sample directory structures for different language repositories to verify correct detection."
        },
        {
          "id": 2,
          "title": "Modify Project Root Detection",
          "description": "Update the project root detection logic to work without relying on package.json by checking for various project indicators.",
          "dependencies": [
            1
          ],
          "details": "Modify src/utils/project.js to enhance findProjectRoot function to recognize project roots based on multiple indicators like .git directory, requirements.txt, Gemfile, etc. Ensure backward compatibility with JavaScript projects while adding support for other language repositories.",
          "status": "pending",
          "testStrategy": "Test with various repository structures to ensure correct root detection for different project types."
        },
        {
          "id": 3,
          "title": "Implement Graceful Fallbacks for Package.json Dependencies",
          "description": "Modify functions that currently rely on package.json to gracefully handle its absence and use alternative sources of information.",
          "dependencies": [
            1,
            2
          ],
          "details": "Identify all functions that read from package.json and modify them to first check if the file exists. Implement alternative logic for each function when package.json is missing, using information from the detected language. Update dependency analysis, script execution, and configuration generation to work with limited information.",
          "status": "pending",
          "testStrategy": "Test each modified function with both JavaScript projects and non-JavaScript projects to ensure proper fallback behavior."
        },
        {
          "id": 4,
          "title": "Add CLI Flags for Project Type Specification",
          "description": "Enhance the CLI to allow users to explicitly specify the project type when automatic detection is insufficient.",
          "dependencies": [
            1
          ],
          "details": "Update src/cli/index.js to add a --project-type (-t) option with choices for supported languages. Ensure this user-specified type overrides the automatic detection when provided. Update help documentation to explain this option.",
          "status": "pending",
          "testStrategy": "Test CLI with various flag combinations to ensure project type is correctly applied."
        },
        {
          "id": 5,
          "title": "Update Configuration Generation for Multiple Languages",
          "description": "Modify the configuration generation process to create appropriate configs based on the detected or specified project language.",
          "dependencies": [
            1,
            3,
            4
          ],
          "details": "Update src/utils/config.js to generate language-specific configurations. Implement a switch statement to handle different project types and apply appropriate defaults and settings for each language. Ensure configurations are still valid and useful even with limited information.",
          "status": "pending",
          "testStrategy": "Generate configurations for different project types and verify they contain appropriate language-specific settings."
        },
        {
          "id": 6,
          "title": "Enhance Error Handling and User Messaging",
          "description": "Improve error messages and user feedback when working with non-JavaScript repositories to clearly communicate limitations.",
          "dependencies": [
            3,
            5
          ],
          "details": "Audit all error messages related to missing package.json or JavaScript-specific features. Replace generic errors with informative messages that explain the limitation and suggest alternatives or workarounds. Add warnings when running in limited functionality mode on non-JavaScript repositories.",
          "status": "pending",
          "testStrategy": "Test error scenarios with non-JavaScript repositories to ensure messages are clear and helpful."
        },
        {
          "id": 7,
          "title": "Create Language-Specific Utility Functions",
          "description": "Implement utility functions for each supported language to handle language-specific operations.",
          "dependencies": [
            1,
            5
          ],
          "details": "Create a new module src/utils/language-utils.js with functions for each supported language. Implement functions to identify dependencies, entry points, and other project information for Python, Ruby, and Shell projects. These utilities will replace JavaScript-specific functions when working with other languages.",
          "status": "pending",
          "testStrategy": "Write tests for each language utility with sample project structures to verify correct information extraction."
        },
        {
          "id": 8,
          "title": "Update Documentation and Examples",
          "description": "Update all documentation and examples to reflect multi-language support and explain limitations.",
          "dependencies": [
            1,
            2,
            3,
            4,
            5,
            6,
            7
          ],
          "details": "Update README.md and other documentation to clearly explain multi-language support. Add examples for using the tool with different project types. Document any limitations when working with non-JavaScript repositories. Create language-specific sections in the documentation to help users with different project types.",
          "status": "pending",
          "testStrategy": "Review documentation for accuracy and completeness. Ensure examples work as described."
        }
      ]
    }
  ]
}