# -----------------------------------------------------------------------------
# Release Workflow Template
# -----------------------------------------------------------------------------
# IMPORTANT: This is a template file intended to be copied into your repository.
# The "Unable to find reusable workflow" errors are expected in template mode.
# When using this template in your actual repository, ensure all referenced
# workflow files exist at the correct paths.
#
# This workflow handles versioning, tagging, and creating releases.
# It runs quality checks, determines the environment, creates version tags,
# and creates releases in both GitHub and Jira.
#
# Example usage:
# ```yaml
# name: Release
# on:
#   push:
#     branches: [main, dev, staging]
#
# jobs:
#   release:
#     uses: ./.github/workflows/release.yml
#     with:
#       environment: ${{ github.ref_name }}
#       jira_project_key: PROJ
#     secrets:
#       PAT: ${{ secrets.GITHUB_TOKEN }}
#       JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
# ```

name: 🚀 Release

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: false
        default: 'dev'
        type: string
      node_version:
        description: 'Node.js version to use'
        required: false
        default: '20.x'
        type: string
      package_manager:
        description: 'Package manager to use (npm, yarn, or bun)'
        required: false
        default: 'npm'
        type: string
      working_directory:
        description: 'Directory to run commands in (if not root)'
        required: false
        default: ''
        type: string
      skip_quality:
        description: 'Skip the quality workflow'
        required: false
        default: false
        type: boolean
      skip_lint:
        description: 'Skip the lint job in quality workflow'
        required: false
        default: false
        type: boolean
      skip_typecheck:
        description: 'Skip the typecheck job in quality workflow'
        required: false
        default: false
        type: boolean
      skip_test:
        description: 'Skip the test job in quality workflow'
        required: false
        default: false
        type: boolean
      skip_format:
        description: 'Skip the format check job in quality workflow'
        required: false
        default: false
        type: boolean
      skip_build:
        description: 'Skip the build job in quality workflow'
        required: false
        default: false
        type: boolean
      skip_security:
        description: 'Skip the security scan job in quality workflow'
        required: false
        default: false
        type: boolean
      skip_jira:
        description: 'Skip creating Jira release'
        required: false
        default: false
        type: boolean
      skip_github_release:
        description: 'Skip creating GitHub release'
        required: false
        default: false
        type: boolean
      skip_github_issue:
        description: 'Skip creating GitHub issue on failure'
        required: false
        default: false
        type: boolean
      skip_jira_issue:
        description: 'Skip creating Jira issue on failure'
        required: false
        default: false
        type: boolean
      jira_project_key:
        description: 'Jira project key (e.g., PROJ)'
        required: false
        type: string
        default: ''
    outputs:
      version:
        description: 'The version that was created'
        value: ${{ jobs.version.outputs.version }}
      tag:
        description: 'The tag that was created'
        value: ${{ jobs.version.outputs.tag }}
    secrets:
      PAT:
        description: 'Personal Access Token for GitHub operations'
        required: true
      JIRA_AUTOMATION_WEBHOOK_DEV:
        description: 'Jira automation webhook for dev environment'
        required: false
      JIRA_AUTOMATION_WEBHOOK_STAGING:
        description: 'Jira automation webhook for staging environment'
        required: false
      JIRA_AUTOMATION_WEBHOOK_PRODUCTION:
        description: 'Jira automation webhook for production environment'
        required: false
      JIRA_API_TOKEN:
        description: 'Jira API token for authentication'
        required: false
      JIRA_AUTOMATION_WEBHOOK:
        description: 'General Jira automation webhook'
        required: false
      ANTHROPIC_API_KEY:
        description: 'Anthropic API key for Claude code quality integrations'
        required: false

# Prevent concurrent runs of the same workflow on the same ref
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # Environment validation
  determine_environment:
    name: 🌍 Validate Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.validate_env.outputs.environment }}
    steps:
      - name: Validate environment input
        id: validate_env
        run: |
          ENV="${{ inputs.environment }}"
          if [[ "$ENV" != "dev" && "$ENV" != "staging" && "$ENV" != "production" ]]; then
            echo "::error::Invalid environment value: $ENV. Must be one of: dev, staging, production"
            exit 1
          fi
          echo "environment=$ENV" >> $GITHUB_OUTPUT
          echo "✅ Environment validated: $ENV"

  # Quality checks
  # Note: This is a template workflow file.
  # In actual usage, you would need to ensure all referenced workflow files exist in your repository.
  quality:
    name: 🔍 Quality Checks
    if: ${{ !inputs.skip_quality }}
    # Reference to the quality checks workflow
    uses: ./.github/workflows/quality.yml
    with:
      node_version: ${{ inputs.node_version }}
      package_manager: ${{ inputs.package_manager }}
      working_directory: ${{ inputs.working_directory }}
      skip_lint: ${{ inputs.skip_lint }}
      skip_typecheck: ${{ inputs.skip_typecheck }}
      skip_test: ${{ inputs.skip_test }}
      skip_format: ${{ inputs.skip_format }}
      skip_build: ${{ inputs.skip_build }}
      skip_security: ${{ inputs.skip_security }}
    secrets:
      PAT: ${{ secrets.PAT }}
      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

  # Version bumping and release creation
  version:
    name: 📦 Version
    needs: [determine_environment, quality]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') && (!inputs.skip_quality || needs.quality.result == 'success' || needs.quality.result == 'skipped') }}
    outputs:
      version: ${{ steps.version.outputs.new_version }}
      tag: ${{ steps.version.outputs.tag }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT }}

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.18.0'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔧 Configure Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: 🔼 Bump version
        id: version
        run: |
          # Bump version, create changelog, and commit, but DO NOT tag yet.
          # Use --releaseCommitMessageFormat instead of deprecated --message.
          yarn standard-version --skip.tag --releaseCommitMessageFormat "chore(release): {{currentTag}} [skip ci]"

          # Get the new version from package.json
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

          # Determine the actual tag name based on the environment
          ACTUAL_TAG_NAME=""
          if [ "${{ needs.determine_environment.outputs.environment }}" == "main" ]; then
            ACTUAL_TAG_NAME="v$NEW_VERSION"
          else
            ACTUAL_TAG_NAME="v$NEW_VERSION-${{ needs.determine_environment.outputs.environment }}"
          fi

          # Output the determined tag name for subsequent steps
          echo "tag=$ACTUAL_TAG_NAME" >> $GITHUB_OUTPUT

          # Now, create the git tag with the correct name and message
          git tag -a "$ACTUAL_TAG_NAME" -m "chore(release): $NEW_VERSION [skip ci]"

      - name: 🚀 Push changes
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.PAT }}@github.com/${{ github.repository }}
          git push --follow-tags origin ${{ needs.determine_environment.outputs.environment }}

  jira_release:
    name: 🔖 Create Jira Release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [determine_environment, quality, version]
    if: ${{ success() && !contains(github.event.head_commit.message, '[skip ci]') && (github.event.inputs.skip_jira != 'true' && inputs.skip_jira != true) && (!inputs.skip_quality || needs.quality.result == 'success' || needs.quality.result == 'skipped') }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔍 Check Jira Setup
        id: check_jira
        run: |
          # Set environment-specific webhook variable
          if [[ "${{ needs.determine_environment.outputs.environment }}" == "dev" ]]; then
            WEBHOOK="${JIRA_AUTOMATION_WEBHOOK_DEV}"
          elif [[ "${{ needs.determine_environment.outputs.environment }}" == "staging" ]]; then
            WEBHOOK="${JIRA_AUTOMATION_WEBHOOK_STAGING}"
          elif [[ "${{ needs.determine_environment.outputs.environment }}" == "main" ]]; then
            WEBHOOK="${JIRA_AUTOMATION_WEBHOOK_PRODUCTION}"
          fi

          # Check if webhook exists
          if [[ -z "${WEBHOOK}" ]]; then
            echo "has_jira_setup=false" >> $GITHUB_OUTPUT
            echo "webhook=" >> $GITHUB_OUTPUT
          else
            echo "has_jira_setup=true" >> $GITHUB_OUTPUT
            echo "webhook=${WEBHOOK}" >> $GITHUB_OUTPUT
          fi
        env:
          JIRA_AUTOMATION_WEBHOOK_DEV: ${{ secrets.JIRA_AUTOMATION_WEBHOOK_DEV }}
          JIRA_AUTOMATION_WEBHOOK_STAGING: ${{ secrets.JIRA_AUTOMATION_WEBHOOK_STAGING }}
          JIRA_AUTOMATION_WEBHOOK_PRODUCTION: ${{ secrets.JIRA_AUTOMATION_WEBHOOK_PRODUCTION }}

      - name: 🔖 Create Jira Release
        if: steps.check_jira.outputs.has_jira_setup == 'true'
        uses: GeoWerkstatt/create-jira-release@v1
        continue-on-error: true
        with:
          jira-project-key: ${{ inputs.jira_project_key }}
          jira-automation-webhook: ${{ secrets.JIRA_AUTOMATION_WEBHOOK }}
          build-version: '${{ github.event.repository.name }} (${{ needs.determine_environment.outputs.environment }}) v${{ needs.version.outputs.version }}'

  github_release:
    name: 📢 Create GitHub Release
    needs: [determine_environment, quality, version]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: ${{ github.event.inputs.skip_github_release != 'true' && inputs.skip_github_release != true && (!inputs.skip_quality || needs.quality.result == 'success' || needs.quality.result == 'skipped') }}
    steps:
      - name: 📢 Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.version.outputs.tag }}
          generate_release_notes: true
          token: ${{ secrets.PAT }}
