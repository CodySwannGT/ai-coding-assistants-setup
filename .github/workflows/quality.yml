name: 🔍 Quality Checks

on:
  workflow_call:
    inputs:
      node_version:
        description: 'Node.js version to use'
        type: string
        default: '20'
      package_manager:
        description: 'Package manager (npm, yarn, bun)'
        type: string
        default: 'npm'
      skip_test:
        description: 'Skip test jobs'
        type: boolean
        default: false
      skip_lint:
        description: 'Skip linting'
        type: boolean
        default: false
      skip_typecheck:
        description: 'Skip type checking'
        type: boolean
        default: false
      skip_security:
        description: 'Skip security checks'
        type: boolean
        default: false
      skip_coverage:
        description: 'Skip code coverage'
        type: boolean
        default: false
      skip_jobs:
        description: 'Comma-separated list of jobs to skip'
        type: string
        default: ''
      working_directory:
        description: 'Working directory for all operations'
        type: string
        default: '.'
    secrets:
      GITHUB_TOKEN:
        required: false
      SONAR_TOKEN:
        required: false
      SNYK_TOKEN:
        required: false
      GITGUARDIAN_API_KEY:
        required: false
      FOSSA_API_KEY:
        required: false
      ANTHROPIC_API_KEY:
        required: false

# Improved concurrency handling with smarter cancellation
concurrency:
  group: quality-${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  # Removed the centralized install_dependencies job
  
  lint:
    name: 🧹 Lint
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: ${{ !inputs.skip_lint && !contains(inputs.skip_jobs, 'lint') }}

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup dependencies
        uses: ./.github/actions/setup-dependencies
        with:
          node-version: ${{ inputs.node_version }}
          package-manager: ${{ inputs.package_manager }}
          working-directory: ${{ inputs.working_directory }}

      - name: 🧹 Run linter
        run: ${{ inputs.package_manager }} run lint
        working-directory: ${{ inputs.working_directory || '.' }}

  typecheck:
    name: 🔍 Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: ${{ !inputs.skip_typecheck && !contains(inputs.skip_jobs, 'typecheck') }}

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup dependencies
        uses: ./.github/actions/setup-dependencies
        with:
          node-version: ${{ inputs.node_version }}
          package-manager: ${{ inputs.package_manager }}
          working-directory: ${{ inputs.working_directory }}

      - name: 🔍 Run type check
        run: ${{ inputs.package_manager }} run typecheck
        working-directory: ${{ inputs.working_directory || '.' }}

  format_check:
    name: 💅 Format Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: ${{ !inputs.skip_lint && !contains(inputs.skip_jobs, 'format:check') }}

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup dependencies
        uses: ./.github/actions/setup-dependencies
        with:
          node-version: ${{ inputs.node_version }}
          package-manager: ${{ inputs.package_manager }}
          working-directory: ${{ inputs.working_directory }}

      - name: 🔍 Check for format:check script
        id: check_script
        run: |
          if [ -f "package.json" ]; then
            if grep -q '"format:check"' package.json; then
              echo "exists=true" >> $GITHUB_OUTPUT
            else
              echo "exists=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        working-directory: ${{ inputs.working_directory || '.' }}

      - name: 💅 Check formatting
        if: steps.check_script.outputs.exists == 'true'
        run: ${{ inputs.package_manager }} run format:check
        working-directory: ${{ inputs.working_directory || '.' }}

      - name: ⏭️ Skip format check (no format:check script)
        if: steps.check_script.outputs.exists == 'false'
        run: echo "Skipping format check - format:check script not found in package.json"

  test_unit:
    name: 🧪 Run Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: ${{ !inputs.skip_test && !contains(inputs.skip_jobs, 'test:unit') }}

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup dependencies
        uses: ./.github/actions/setup-dependencies
        with:
          node-version: ${{ inputs.node_version }}
          package-manager: ${{ inputs.package_manager }}
          working-directory: ${{ inputs.working_directory }}

      - name: 🔍 Check for test:unit script
        id: check_script
        run: |
          if [ -f "package.json" ]; then
            if grep -q '"test:unit"' package.json; then
              echo "exists=true" >> $GITHUB_OUTPUT
            else
              echo "exists=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        working-directory: ${{ inputs.working_directory || '.' }}

      - name: 🧪 Run unit tests
        if: steps.check_script.outputs.exists == 'true'
        run: |
          if [ "${{ inputs.package_manager }}" = "npm" ]; then
            npm run test:unit
          elif [ "${{ inputs.package_manager }}" = "yarn" ]; then
            yarn test:unit
          elif [ "${{ inputs.package_manager }}" = "bun" ]; then
            bun run test:unit
          fi
        working-directory: ${{ inputs.working_directory || '.' }}

      - name: ⏭️ Skip unit tests (no test:unit script)
        if: steps.check_script.outputs.exists == 'false'
        run: echo "Skipping unit tests - test:unit script not found in package.json"

  test_integration:
    name: 🧪 Run Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: ${{ !inputs.skip_test && !contains(inputs.skip_jobs, 'test:integration') }}

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup dependencies
        uses: ./.github/actions/setup-dependencies
        with:
          node-version: ${{ inputs.node_version }}
          package-manager: ${{ inputs.package_manager }}
          working-directory: ${{ inputs.working_directory }}

      - name: 🔍 Check for test:integration script
        id: check_script
        run: |
          if [ -f "package.json" ]; then
            if grep -q '"test:integration"' package.json; then
              echo "exists=true" >> $GITHUB_OUTPUT
            else
              echo "exists=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        working-directory: ${{ inputs.working_directory || '.' }}

      - name: 🧪 Run integration tests
        if: steps.check_script.outputs.exists == 'true'
        run: |
          if [ "${{ inputs.package_manager }}" = "npm" ]; then
            npm run test:integration
          elif [ "${{ inputs.package_manager }}" = "yarn" ]; then
            yarn test:integration
          elif [ "${{ inputs.package_manager }}" = "bun" ]; then
            bun run test:integration
          fi
        working-directory: ${{ inputs.working_directory || '.' }}

      - name: ⏭️ Skip integration tests (no test:integration script)
        if: steps.check_script.outputs.exists == 'false'
        run: echo "Skipping integration tests - test:integration script not found in package.json"

  test_e2e:
    name: 🎯 Run E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: ${{ !inputs.skip_test && !contains(inputs.skip_jobs, 'test:e2e') }}

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup dependencies
        uses: ./.github/actions/setup-dependencies
        with:
          node-version: ${{ inputs.node_version }}
          package-manager: ${{ inputs.package_manager }}
          working-directory: ${{ inputs.working_directory }}

      - name: 🔍 Check for test:e2e script
        id: check_script
        run: |
          if [ -f "package.json" ]; then
            if grep -q '"test:e2e"' package.json; then
              echo "exists=true" >> $GITHUB_OUTPUT
            else
              echo "exists=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        working-directory: ${{ inputs.working_directory || '.' }}

      - name: 🎯 Run E2E tests
        if: steps.check_script.outputs.exists == 'true'
        run: |
          if [ "${{ inputs.package_manager }}" = "npm" ]; then
            npm run test:e2e
          elif [ "${{ inputs.package_manager }}" = "yarn" ]; then
            yarn test:e2e
          elif [ "${{ inputs.package_manager }}" = "bun" ]; then
            bun run test:e2e
          fi
        working-directory: ${{ inputs.working_directory || '.' }}

      - name: ⏭️ Skip E2E tests (no test:e2e script)
        if: steps.check_script.outputs.exists == 'false'
        run: echo "Skipping E2E tests - test:e2e script not found in package.json"

  test_coverage:
    name: 📊 Code Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: ${{ !inputs.skip_coverage && !contains(inputs.skip_jobs, 'coverage') }}

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup dependencies
        uses: ./.github/actions/setup-dependencies
        with:
          node-version: ${{ inputs.node_version }}
          package-manager: ${{ inputs.package_manager }}
          working-directory: ${{ inputs.working_directory }}

      - name: 📊 Run test coverage
        run: |
          if [ -f "package.json" ] && grep -q '"test:coverage"' package.json; then
            ${{ inputs.package_manager }} run test:coverage
          else
            echo "No test:coverage script found, running default test"
            ${{ inputs.package_manager }} test -- --coverage
          fi
        working-directory: ${{ inputs.working_directory || '.' }}

      - name: 📤 Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage/
            .nyc_output/
          retention-days: 7

  ai_code_review:
    name: 🤖 AI Code Quality Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: ${{ !inputs.skip_lint && !contains(inputs.skip_jobs, 'ai_code_review') && github.event_name == 'pull_request' }}

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full depth for better diffs

      - name: 📦 Setup dependencies
        uses: ./.github/actions/setup-dependencies
        with:
          node-version: ${{ inputs.node_version }}
          package-manager: ${{ inputs.package_manager }}
          working-directory: ${{ inputs.working_directory }}

      - name: 🤖 Install Claude CLI
        run: |
          # Use npm as the default package manager if not specified
          PACKAGE_MANAGER="${{ inputs.package_manager }}"
          if [ -z "$PACKAGE_MANAGER" ]; then
            PACKAGE_MANAGER="npm"
            echo "Package manager not specified, using npm as default"
          fi

          if [ "$PACKAGE_MANAGER" = "npm" ]; then
            npm install -g @anthropic-ai/claude-code
          elif [ "$PACKAGE_MANAGER" = "yarn" ]; then
            yarn global add @anthropic-ai/claude-code
          elif [ "$PACKAGE_MANAGER" = "bun" ]; then
            bun add -g @anthropic-ai/claude-code
          else
            echo "Unsupported package manager: $PACKAGE_MANAGER"
            exit 1
          fi

      - name: 🔍 Run Claude code quality check
        id: code_review
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          #!/usr/bin/env bash
          # Check if ANTHROPIC_API_KEY is set
          if [ -z "$ANTHROPIC_API_KEY" ]; then
            echo "⚠️ ANTHROPIC_API_KEY is not set. Skipping Claude code quality check."
            echo "review_passed=true" >> $GITHUB_OUTPUT

            # Create a minimal report for artifact upload using echo instead of heredoc
            echo "# Claude AI Code Review Results" > code_review_results.md
            echo "" >> code_review_results.md
            echo "⚠️ **SKIPPED: ANTHROPIC_API_KEY not provided**" >> code_review_results.md
            echo "" >> code_review_results.md
            echo "Claude code quality check was skipped because the ANTHROPIC_API_KEY secret is not set." >> code_review_results.md
            echo "To enable AI-powered code reviews, please add the ANTHROPIC_API_KEY secret to your repository or workflow." >> code_review_results.md

            exit 0
          fi

          # Create basic prompt using echo instead of heredoc
          echo "Perform a code review on the provided code changes. Focus on code quality, best practices, and potential bugs." > code_review_prompt.txt

          # Check if guidelines file exists in the repository and append it
          if [ -f ".github/workflows/code_review_guidelines.md" ]; then
            cat .github/workflows/code_review_guidelines.md >> code_review_prompt.txt
          elif [ -f ".github/code_review_guidelines.md" ]; then
            cat .github/code_review_guidelines.md >> code_review_prompt.txt
          fi

          # Get the diff for the PR using echo to create content
          echo "Analyzing the following code changes:" >> code_review_prompt.txt
          echo "" >> code_review_prompt.txt
          git diff origin/${{ github.base_ref }}...HEAD >> code_review_prompt.txt

          # Run Claude review and capture output
          if claude-code review --prompt "$(cat code_review_prompt.txt)" > code_review_results.md 2>&1; then
            echo "✅ Code review completed successfully"
            echo "review_passed=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Code review found issues"
            echo "review_passed=false" >> $GITHUB_OUTPUT
          fi

      - name: 📝 Post review comment
        if: github.event_name == 'pull_request' && steps.code_review.outputs.review_passed != ''
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const reviewContent = fs.readFileSync('code_review_results.md', 'utf8');
            
            // Find existing comment
            const comments = await github.rest.issues.listComments({
              ...context.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Claude AI Code Review Results')
            );
            
            const commentBody = reviewContent;
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                ...context.repo,
                comment_id: botComment.id,
                body: commentBody,
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: context.issue.number,
                body: commentBody,
              });
            }

      - name: 📤 Upload review results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ai-code-review-results
          path: code_review_results.md
          retention-days: 30

  ai_security_scan:
    name: 🛡️ AI Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: ${{ !inputs.skip_security && !contains(inputs.skip_jobs, 'ai_security_scan') }}

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup dependencies
        uses: ./.github/actions/setup-dependencies
        with:
          node-version: ${{ inputs.node_version }}
          package-manager: ${{ inputs.package_manager }}
          working-directory: ${{ inputs.working_directory }}

      - name: 🤖 Install Claude CLI
        run: |
          if [ "${{ inputs.package_manager }}" = "npm" ]; then
            npm install -g @anthropic-ai/claude-code
          elif [ "${{ inputs.package_manager }}" = "yarn" ]; then
            yarn global add @anthropic-ai/claude-code
          elif [ "${{ inputs.package_manager }}" = "bun" ]; then
            bun add -g @anthropic-ai/claude-code
          fi

      - name: 🛡️ Run Claude security scan
        id: security_scan
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          #!/usr/bin/env bash
          # Check if ANTHROPIC_API_KEY is set
          if [ -z "$ANTHROPIC_API_KEY" ]; then
            echo "⚠️ ANTHROPIC_API_KEY is not set. Skipping Claude security scan."
            echo "scan_passed=true" >> $GITHUB_OUTPUT

            # Create a minimal report using echo
            echo "# Claude AI Security Scan Results" > security_scan_results.md
            echo "" >> security_scan_results.md
            echo "⚠️ **SKIPPED: ANTHROPIC_API_KEY not provided**" >> security_scan_results.md
            echo "" >> security_scan_results.md
            echo "Claude security scan was skipped because the ANTHROPIC_API_KEY secret is not set." >> security_scan_results.md

            exit 0
          fi

          # Create security scan prompt using echo
          echo "Perform a security analysis on the codebase. Focus on:" > security_prompt.txt
          echo "- Hardcoded secrets and credentials" >> security_prompt.txt
          echo "- SQL injection vulnerabilities" >> security_prompt.txt
          echo "- XSS vulnerabilities" >> security_prompt.txt
          echo "- Insecure dependencies" >> security_prompt.txt
          echo "- Authentication/authorization issues" >> security_prompt.txt
          echo "- Data exposure risks" >> security_prompt.txt

          # Check if security guidelines exist and append
          if [ -f ".github/workflows/security_scan_guidelines.md" ]; then
            cat .github/workflows/security_scan_guidelines.md >> security_prompt.txt
          elif [ -f ".github/security_scan_guidelines.md" ]; then
            cat .github/security_scan_guidelines.md >> security_prompt.txt
          fi

          # Add file list to scan
          echo "" >> security_prompt.txt
          echo "Files to analyze:" >> security_prompt.txt
          find . -name "*.js" -o -name "*.ts" -o -name "*.jsx" -o -name "*.tsx" -o -name "*.json" | grep -v node_modules | head -100 >> security_prompt.txt

          # Run Claude security scan
          if claude-code scan --prompt "$(cat security_prompt.txt)" > security_scan_results.md 2>&1; then
            echo "✅ Security scan completed"
            echo "scan_passed=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Security issues found"
            echo "scan_passed=false" >> $GITHUB_OUTPUT
          fi

      - name: 📤 Upload security scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ai-security-scan-results
          path: security_scan_results.md
          retention-days: 30

  sonarcloud:
    name: 🔍 SonarCloud SAST
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: ${{ !inputs.skip_security && !contains(inputs.skip_jobs, 'sonarcloud') }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full depth for proper analysis

      - name: 🔍 Check for SonarCloud token
        id: check_token
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          if [ -z "$SONAR_TOKEN" ]; then
            echo "⚠️ SONAR_TOKEN is not set. Skipping SonarCloud analysis."
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: 📊 SonarCloud Scan
        if: steps.check_token.outputs.skip != 'true'
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          # Project configuration should be in sonar-project.properties
          # or passed as args here
          args: >
            -Dsonar.organization=${{ github.repository_owner }}
            -Dsonar.projectKey=${{ github.repository_owner }}_${{ github.event.repository.name }}

      - name: 📊 SonarCloud Scan Skipped
        if: steps.check_token.outputs.skip == 'true'
        run: |
          echo "::warning::SonarCloud analysis skipped - SONAR_TOKEN not configured"
          echo "To enable SonarCloud analysis, add SONAR_TOKEN to your repository secrets"

  snyk:
    name: 🛡️ Snyk Dependency Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: ${{ !inputs.skip_security && !contains(inputs.skip_jobs, 'snyk') }}

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup dependencies
        uses: ./.github/actions/setup-dependencies
        with:
          node-version: ${{ inputs.node_version }}
          package-manager: ${{ inputs.package_manager }}
          working-directory: ${{ inputs.working_directory }}

      - name: 🔍 Check for Snyk token
        id: check_token
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          if [ -z "$SNYK_TOKEN" ]; then
            echo "⚠️ SNYK_TOKEN is not set. Skipping Snyk scan."
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: 🛡️ Run Snyk to check for vulnerabilities
        if: steps.check_token.outputs.skip != 'true'
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: 🛡️ Snyk Scan Skipped
        if: steps.check_token.outputs.skip == 'true'
        run: |
          echo "::warning::Snyk scan skipped - SNYK_TOKEN not configured"
          echo "To enable Snyk vulnerability scanning, add SNYK_TOKEN to your repository secrets"

  gitguardian:
    name: 🔐 GitGuardian Secret Scan
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: ${{ !inputs.skip_security && !contains(inputs.skip_jobs, 'gitguardian') }}

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full depth for proper scanning

      - name: 🔍 Check for GitGuardian API key
        id: check_token
        env:
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
        run: |
          if [ -z "$GITGUARDIAN_API_KEY" ]; then
            echo "⚠️ GITGUARDIAN_API_KEY is not set. Skipping GitGuardian scan."
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: 🔐 GitGuardian scan
        if: steps.check_token.outputs.skip != 'true'
        uses: GitGuardian/ggshield-action@v1.31.0
        env:
          GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
          GITHUB_PUSH_BASE_SHA: ${{ github.event.base_sha }}
          GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}

      - name: 🔐 GitGuardian Scan Skipped
        if: steps.check_token.outputs.skip == 'true'
        run: |
          echo "::warning::GitGuardian scan skipped - GITGUARDIAN_API_KEY not configured"
          echo "To enable secret detection, add GITGUARDIAN_API_KEY to your repository secrets"

  fossa:
    name: 📜 FOSSA License Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: ${{ !inputs.skip_security && !contains(inputs.skip_jobs, 'fossa') }}

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Setup dependencies
        uses: ./.github/actions/setup-dependencies
        with:
          node-version: ${{ inputs.node_version }}
          package-manager: ${{ inputs.package_manager }}
          working-directory: ${{ inputs.working_directory }}

      - name: 🔍 Check for FOSSA API key
        id: check_token
        env:
          FOSSA_API_KEY: ${{ secrets.FOSSA_API_KEY }}
        run: |
          if [ -z "$FOSSA_API_KEY" ]; then
            echo "⚠️ FOSSA_API_KEY is not set. Skipping FOSSA scan."
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: 📜 Run FOSSA Scan
        if: steps.check_token.outputs.skip != 'true'
        uses: fossas/fossa-action@v1.3.3
        with:
          api-key: ${{ secrets.FOSSA_API_KEY }}

      - name: 📜 FOSSA Scan Skipped
        if: steps.check_token.outputs.skip == 'true'
        run: |
          echo "::warning::FOSSA scan skipped - FOSSA_API_KEY not configured"
          echo "To enable license compliance checking, add FOSSA_API_KEY to your repository secrets"

  # Summary job that depends on all other jobs
  quality_summary:
    name: 📋 Quality Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [
      lint,
      typecheck,
      format_check,
      test_unit,
      test_integration,
      test_e2e,
      test_coverage,
      ai_code_review,
      ai_security_scan,
      sonarcloud,
      snyk,
      gitguardian,
      fossa
    ]

    steps:
      - name: 📊 Check results
        run: |
          echo "## 📋 Quality Check Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Function to check job status
          check_job() {
            local job_name=$1
            local job_result=$2
            local emoji=$3
            
            if [ "$job_result" = "success" ]; then
              echo "$emoji ✅ $job_name: Passed" >> $GITHUB_STEP_SUMMARY
            elif [ "$job_result" = "failure" ]; then
              echo "$emoji ❌ $job_name: Failed" >> $GITHUB_STEP_SUMMARY
            elif [ "$job_result" = "cancelled" ]; then
              echo "$emoji ⏭️ $job_name: Cancelled" >> $GITHUB_STEP_SUMMARY
            else
              echo "$emoji ⏭️ $job_name: Skipped" >> $GITHUB_STEP_SUMMARY
            fi
          }
          
          # Check each job
          check_job "Lint" "${{ needs.lint.result }}" "🧹"
          check_job "Type Check" "${{ needs.typecheck.result }}" "🔍"
          check_job "Format Check" "${{ needs.format_check.result }}" "💅"
          check_job "Unit Tests" "${{ needs.test_unit.result }}" "🧪"
          check_job "Integration Tests" "${{ needs.test_integration.result }}" "🧪"
          check_job "E2E Tests" "${{ needs.test_e2e.result }}" "🎯"
          check_job "Code Coverage" "${{ needs.test_coverage.result }}" "📊"
          check_job "AI Code Review" "${{ needs.ai_code_review.result }}" "🤖"
          check_job "AI Security Scan" "${{ needs.ai_security_scan.result }}" "🛡️"
          check_job "SonarCloud" "${{ needs.sonarcloud.result }}" "🔍"
          check_job "Snyk" "${{ needs.snyk.result }}" "🛡️"
          check_job "GitGuardian" "${{ needs.gitguardian.result }}" "🔐"
          check_job "FOSSA" "${{ needs.fossa.result }}" "📜"
          
          # Overall status
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ contains(needs.*.result, 'failure') }}" = "true" ]; then
            echo "## ❌ Overall Status: Failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "## ✅ Overall Status: Passed" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 🚨 Fail if any required checks failed
        if: |
          contains(needs.*.result, 'failure') &&
          (needs.lint.result == 'failure' ||
           needs.typecheck.result == 'failure' ||
           needs.test_unit.result == 'failure' ||
           needs.test_integration.result == 'failure' ||
           needs.test_e2e.result == 'failure')
        run: |
          echo "::error::One or more required quality checks failed"
          exit 1