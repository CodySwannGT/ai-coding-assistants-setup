# -----------------------------------------------------------------------------
# Quality Checks Workflow
# -----------------------------------------------------------------------------
# This workflow runs various quality checks on the codebase including:
# - Linting
# - Type checking
# - Unit tests
# - Format checking
# - Build verification
# - Security scanning
# - AI-powered code quality and security analysis
#
# Example usage in another workflow:
# ```yaml
# quality:
#   uses: ./.github/workflows/quality.yml
#   with:
#     node_version: '20.x'
#     package_manager: 'npm'
#     skip_security: true
#   secrets:
#     PAT: ${{ secrets.GITHUB_TOKEN }}
#     ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
# ```

name: 🔍 Quality Checks

on:
  workflow_call:
    inputs:
      node_version:
        description: 'Node.js version to use'
        required: false
        default: '20.x'
        type: string
      package_manager:
        description: 'Package manager to use (npm, yarn, or bun)'
        required: false
        default: 'npm'
        type: string
      skip_lint:
        description: 'Skip the lint job'
        required: false
        default: false
        type: boolean
      skip_typecheck:
        description: 'Skip the typecheck job'
        required: false
        default: false
        type: boolean
      skip_test:
        description: 'Skip the test job'
        required: false
        default: false
        type: boolean
      skip_format:
        description: 'Skip the format check job'
        required: false
        default: false
        type: boolean
      skip_build:
        description: 'Skip the build job'
        required: false
        default: false
        type: boolean
      skip_security:
        description: 'Skip the security scan job'
        required: false
        default: false
        type: boolean
      skip_code_quality_check:
        description: 'Skip the Claude quality check job'
        required: false
        default: false
        type: boolean
      skip_claude_security_scan:
        description: 'Skip the Claude security scan job'
        required: false
        default: false
        type: boolean
      working_directory:
        description: 'Directory to run commands in (if not root)'
        required: false
        default: ''
        type: string
    secrets:
      PAT:
        description: 'Personal Access Token for GitHub operations'
        required: false
      ANTHROPIC_API_KEY:
        description: 'Anthropic API key for Claude code quality integrations'
        required: false

# Prevent concurrent runs of the same workflow on the same ref
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: 🧹 Lint
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: ${{ !inputs.skip_lint }}

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          cache: ${{ inputs.package_manager }}

      - name: 📦 Install dependencies
        run: |
          if [ "${{ inputs.package_manager }}" = "npm" ]; then
            npm ci
          elif [ "${{ inputs.package_manager }}" = "yarn" ]; then
            yarn install --frozen-lockfile
          elif [ "${{ inputs.package_manager }}" = "bun" ]; then
            bun install --frozen-lockfile
          else
            echo "Unsupported package manager: ${{ inputs.package_manager }}"
            exit 1
          fi
        working-directory: ${{ inputs.working_directory || '.' }}

      - name: 🧹 Run linter
        run: ${{ inputs.package_manager }} run lint
        working-directory: ${{ inputs.working_directory || '.' }}

  typecheck:
    name: 🔍 Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: ${{ !inputs.skip_typecheck }}

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          cache: ${{ inputs.package_manager }}

      - name: 📦 Install dependencies
        run: |
          if [ "${{ inputs.package_manager }}" = "npm" ]; then
            npm ci
          elif [ "${{ inputs.package_manager }}" = "yarn" ]; then
            yarn install --frozen-lockfile
          elif [ "${{ inputs.package_manager }}" = "bun" ]; then
            bun install --frozen-lockfile
          else
            echo "Unsupported package manager: ${{ inputs.package_manager }}"
            exit 1
          fi
        working-directory: ${{ inputs.working_directory || '.' }}

      - name: 🔍 Run type check
        run: ${{ inputs.package_manager }} run typecheck
        working-directory: ${{ inputs.working_directory || '.' }}

  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: ${{ !inputs.skip_test }}

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          cache: ${{ inputs.package_manager }}

      - name: 📦 Install dependencies
        run: |
          if [ "${{ inputs.package_manager }}" = "npm" ]; then
            npm ci
          elif [ "${{ inputs.package_manager }}" = "yarn" ]; then
            yarn install --frozen-lockfile
          elif [ "${{ inputs.package_manager }}" = "bun" ]; then
            bun install --frozen-lockfile
          else
            echo "Unsupported package manager: ${{ inputs.package_manager }}"
            exit 1
          fi
        working-directory: ${{ inputs.working_directory || '.' }}

      - name: 🧪 Run tests
        run: |
          if [ "${{ inputs.package_manager }}" = "npm" ]; then
            npm test
          elif [ "${{ inputs.package_manager }}" = "yarn" ]; then
            yarn test
          elif [ "${{ inputs.package_manager }}" = "bun" ]; then
            bun test
          fi
        working-directory: ${{ inputs.working_directory || '.' }}

  format:
    name: 📐 Check Formatting
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: ${{ !inputs.skip_format }}

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          cache: ${{ inputs.package_manager }}

      - name: 📦 Install dependencies
        run: |
          if [ "${{ inputs.package_manager }}" = "npm" ]; then
            npm ci
          elif [ "${{ inputs.package_manager }}" = "yarn" ]; then
            yarn install --frozen-lockfile
          elif [ "${{ inputs.package_manager }}" = "bun" ]; then
            bun install --frozen-lockfile
          else
            echo "Unsupported package manager: ${{ inputs.package_manager }}"
            exit 1
          fi
        working-directory: ${{ inputs.working_directory || '.' }}

      - name: 📐 Check formatting
        run: ${{ inputs.package_manager }} run format:check
        working-directory: ${{ inputs.working_directory || '.' }}

  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: ${{ !inputs.skip_build }}

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          cache: ${{ inputs.package_manager }}

      - name: 📦 Install dependencies
        run: |
          if [ "${{ inputs.package_manager }}" = "npm" ]; then
            npm ci
          elif [ "${{ inputs.package_manager }}" = "yarn" ]; then
            yarn install --frozen-lockfile
          elif [ "${{ inputs.package_manager }}" = "bun" ]; then
            bun install --frozen-lockfile
          else
            echo "Unsupported package manager: ${{ inputs.package_manager }}"
            exit 1
          fi
        working-directory: ${{ inputs.working_directory || '.' }}

      - name: 🏗️ Build project
        run: ${{ inputs.package_manager }} run build
        working-directory: ${{ inputs.working_directory || '.' }}

  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: ${{ !inputs.skip_security }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          cache: ${{ inputs.package_manager }}

      - name: 📦 Install dependencies
        run: |
          if [ "${{ inputs.package_manager }}" = "npm" ]; then
            npm ci
          elif [ "${{ inputs.package_manager }}" = "yarn" ]; then
            yarn install --frozen-lockfile
          elif [ "${{ inputs.package_manager }}" = "bun" ]; then
            bun install --frozen-lockfile
          else
            echo "Unsupported package manager: ${{ inputs.package_manager }}"
            exit 1
          fi
        working-directory: ${{ inputs.working_directory || '.' }}

      - name: 🔒 Run security audit
        run: |
          if [ "${{ inputs.package_manager }}" = "npm" ]; then
            npm audit --production
          elif [ "${{ inputs.package_manager }}" = "yarn" ]; then
            yarn audit --groups dependencies
          elif [ "${{ inputs.package_manager }}" = "bun" ]; then
            bun pm audit
          else
            echo "Unsupported package manager: ${{ inputs.package_manager }}"
            exit 1
          fi
        working-directory: ${{ inputs.working_directory || '.' }}

  code_quality_check:
    name: 🤖 Claude Code Quality Check
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: ${{ !inputs.skip_code_quality_check }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          cache: ${{ inputs.package_manager }}

      - name: 📦 Install dependencies
        run: |
          if [ "${{ inputs.package_manager }}" = "npm" ]; then
            npm ci
          elif [ "${{ inputs.package_manager }}" = "yarn" ]; then
            yarn install --frozen-lockfile
          elif [ "${{ inputs.package_manager }}" = "bun" ]; then
            bun install --frozen-lockfile
          else
            echo "Unsupported package manager: ${{ inputs.package_manager }}"
            exit 1
          fi
        working-directory: ${{ inputs.working_directory || '.' }}

      - name: 🤖 Install Claude CLI
        run: |
          if [ "${{ inputs.package_manager }}" = "npm" ]; then
            npm install -g @anthropic-ai/claude-code
          elif [ "${{ inputs.package_manager }}" = "yarn" ]; then
            yarn global add @anthropic-ai/claude-code
          elif [ "${{ inputs.package_manager }}" = "bun" ]; then
            bun add -g @anthropic-ai/claude-code
          else
            echo "Unsupported package manager: ${{ inputs.package_manager }}"
            exit 1
          fi

      - name: 🔍 Run Claude code quality check
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # For pull requests, check all changes
            git diff -U0 --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | \
            grep -E '\.(js|jsx|ts|tsx|css|scss|html|md)$' | \
            xargs -I {} sh -c 'git diff -U0 ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} -- {} | claude code review'
          else
            # For pushes, check the latest commit
            git diff -U0 --name-only HEAD~1 HEAD | \
            grep -E '\.(js|jsx|ts|tsx|css|scss|html|md)$' | \
            xargs -I {} sh -c 'git diff -U0 HEAD~1 HEAD -- {} | claude code review'
          fi
        working-directory: ${{ inputs.working_directory || '.' }}
        continue-on-error: true

  claude_security_scan:
    name: 🛡️ Claude Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: ${{ !inputs.skip_claude_security_scan }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          cache: ${{ inputs.package_manager }}

      - name: 🤖 Install Claude CLI
        run: |
          if [ "${{ inputs.package_manager }}" = "npm" ]; then
            npm install -g @anthropic-ai/claude-code
          elif [ "${{ inputs.package_manager }}" = "yarn" ]; then
            yarn global add @anthropic-ai/claude-code
          elif [ "${{ inputs.package_manager }}" = "bun" ]; then
            bun add -g @anthropic-ai/claude-code
          else
            echo "Unsupported package manager: ${{ inputs.package_manager }}"
            exit 1
          fi

      - name: 📝 Create security scan prompt
        run: |
          cat > security_prompt.txt << 'EOF'
          You are a cybersecurity expert specializing in code security. Analyze this code for security vulnerabilities including:

          1. Injection vulnerabilities (SQL, command, etc.)
          2. Insecure authentication or authorization
          3. Sensitive data exposure or improper handling
          4. Incorrect use of cryptography
          5. Insecure configuration
          6. Hard-coded credentials or secrets
          7. Path traversal vulnerabilities
          8. Insecure deserialization
          9. Insufficient logging and monitoring
          10. Cross-site scripting (XSS) or CSRF
          11. Dependency vulnerabilities
          12. Use of unsafe or deprecated functions

          Focus only on legitimate security issues. For each issue found, provide:
          - The specific location of the vulnerability
          - The severity level (Critical, High, Medium, Low)
          - A clear explanation of the vulnerability
          - A recommended fix or mitigation strategy

          If no security issues are found, confirm that the code appears secure and follows best practices.
          EOF

      - name: 🔍 Run Claude security scan
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          echo "🔒 Running Claude security scan on changed files"

          mkdir -p security_scan_results

          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # For pull requests, check all relevant changes
            CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -E '\.(js|jsx|ts|tsx|py|rb|php|go|java|rs|c|cpp|h|hpp)$' || echo "")
          else
            # For pushes, check the latest commit
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep -E '\.(js|jsx|ts|tsx|py|rb|php|go|java|rs|c|cpp|h|hpp)$' || echo "")
          fi

          if [ -z "$CHANGED_FILES" ]; then
            echo "No relevant files changed to scan"
            exit 0
          fi

          echo "Found changed files to scan: $CHANGED_FILES"

          for FILE in $CHANGED_FILES; do
            SAFENAME=$(echo "$FILE" | sed 's/\//_/g')
            echo "Scanning $FILE for security issues..."
            
            # Check if file exists and has content
            if [ -f "$FILE" ] && [ -s "$FILE" ]; then
              # Run security scan on the file
              cat "$FILE" | claude explain "$(cat security_prompt.txt)" > "security_scan_results/${SAFENAME}_scan.md" || echo "Failed to scan $FILE"
            else
              echo "File $FILE does not exist or is empty, skipping."
            fi
          done

          # Create summary report
          echo "## Claude Security Scan Results" > security_scan_summary.md
          echo "Scan completed at: $(date)" >> security_scan_summary.md
          echo "" >> security_scan_summary.md

          for RESULT in security_scan_results/*_scan.md; do
            if [ -f "$RESULT" ]; then
              FILENAME=$(basename "$RESULT" | sed 's/_scan\.md$//' | sed 's/_/\//g')
              echo "### File: $FILENAME" >> security_scan_summary.md
              cat "$RESULT" >> security_scan_summary.md
              echo "" >> security_scan_summary.md
              echo "---" >> security_scan_summary.md
              echo "" >> security_scan_summary.md
            fi
          done

          echo "Security scan complete. Results saved to security_scan_summary.md"
          cat security_scan_summary.md
        working-directory: ${{ inputs.working_directory || '.' }}
        continue-on-error: true

      - name: 📤 Upload security scan results
        uses: actions/upload-artifact@v3
        with:
          name: security-scan-results
          path: ${{ inputs.working_directory || '.' }}/security_scan_summary.md
