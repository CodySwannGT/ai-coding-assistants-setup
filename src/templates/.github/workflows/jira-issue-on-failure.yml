# -----------------------------------------------------------------------------
# Jira Issue Creation Workflow
# -----------------------------------------------------------------------------
# This workflow creates a Jira issue when another workflow fails.
# It captures details about the failure and creates a standardized issue
# to help track and resolve CI/CD problems in Jira.
#
# Example usage in another workflow:
# ```yaml
# create_jira_issue_on_failure:
#   if: failure()
#   uses: ./.github/workflows/jira-issue-on-failure.yml
#   with:
#     workflow_name: 'My Workflow'
#     failed_job: 'build_and_test'
#     JIRA_BASE_URL: ${{ vars.JIRA_BASE_URL }}
#     JIRA_USER_EMAIL: ${{ vars.JIRA_USER_EMAIL }}
#     JIRA_PROJECT_KEY: ${{ vars.JIRA_PROJECT_KEY }}
#   secrets:
#     JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
# ```

name: üîñ Jira Issue on Workflow Failure

on:
  workflow_call:
    inputs:
      workflow_name:
        required: true
        type: string
        description: 'Name of the workflow that failed'
      failed_job:
        required: false
        type: string
        description: 'Name of the job that failed (optional)'
      issue_type:
        required: false
        type: string
        default: 'Bug'
        description: 'Type of Jira issue to create (Bug, Task, etc.)'
      JIRA_BASE_URL:
        required: true
        type: string
        description: 'Jira instance base URL (e.g., https://your-domain.atlassian.net)'
      JIRA_USER_EMAIL:
        required: true
        type: string
        description: 'Email address of the Jira user associated with the API token'
      JIRA_PROJECT_KEY:
        required: true
        type: string
        description: 'The key of the Jira project where issues should be created'
      node_version:
        description: 'Node.js version to use'
        required: false
        default: '20.x'
        type: string
      package_manager:
        description: 'Package manager to use (npm, yarn, or bun)'
        required: false
        default: 'npm'
        type: string
      working_directory:
        description: 'Directory to run commands in (if not root)'
        required: false
        default: ''
        type: string
    secrets:
      JIRA_API_TOKEN:
        required: true
        description: 'Jira API token for authentication'

# Prevent concurrent runs of the same workflow on the same ref
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  create_jira_issue:
    name: üìù Create Jira Issue
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}
          cache: ${{ inputs.package_manager }}

      - name: üîñ Create Jira Issue
        id: create_jira_issue
        run: |
          cd ${{ inputs.working_directory || '.' }} && \
          # Set variables
          WORKFLOW_NAME="${{ inputs.workflow_name }}"
          FAILED_JOB="${{ inputs.failed_job || 'Unknown' }}"
          ISSUE_TYPE="${{ inputs.issue_type }}"
          RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          # Create summary with failure details
          if [ "$FAILED_JOB" != "Unknown" ]; then
            SUMMARY="üö® CI Failure: ${WORKFLOW_NAME} - ${FAILED_JOB}"
          else
            SUMMARY="üö® CI Failure: ${WORKFLOW_NAME}"
          fi

          # Create description with markdown formatting
          if [ "$FAILED_JOB" != "Unknown" ]; then
            JOB_INFO=" in job: *${FAILED_JOB}*"
          else
            JOB_INFO=""
          fi

          DESCRIPTION="h2. Workflow Failure

          The \"${WORKFLOW_NAME}\" workflow has failed${JOB_INFO}.

          h3. Details
          * *Workflow Run*: [View Run Details|${RUN_URL}]
          * *Repository*: ${{ github.repository }}
          * *Commit*: ${{ github.sha }}
          * *Commit Message*: ${{ github.event.head_commit.message || 'N/A' }}
          * *Triggered by*: ${{ github.actor }}
          * *Failed at*: $(date -u +"%Y-%m-%dT%H:%M:%SZ")

          Please investigate the workflow logs for more details on the failure."
          DESCRIPTION="${DESCRIPTION//$'\n'/\\n}"

          # Create JSON payload for Jira API
          PAYLOAD=$(cat <<EOF
          {
            "fields": {
              "project": {
                "key": "${{ inputs.JIRA_PROJECT_KEY }}"
              },
              "summary": "${SUMMARY}",
              "description": "${DESCRIPTION}",
              "issuetype": {
                "name": "${ISSUE_TYPE}"
              },
              "labels": ["ci-failure", "automated"]
            }
          }
          EOF
          )

          # Call Jira API to create issue
          RESPONSE=$(curl -s -D- \
            -u "${{ inputs.JIRA_USER_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}" \
            -X POST \
            -H "Content-Type: application/json" \
            --data "${PAYLOAD}" \
            "${{ inputs.JIRA_BASE_URL }}/rest/api/2/issue")

          # Extract issue key from response
          ISSUE_KEY=$(echo "$RESPONSE" | grep -o 'key":"[^"]*' | cut -d'"' -f3)

          if [ -n "$ISSUE_KEY" ]; then
            echo "Successfully created Jira issue: $ISSUE_KEY"
            echo "issue_key=$ISSUE_KEY" >> $GITHUB_OUTPUT
            echo "issue_url=${{ inputs.JIRA_BASE_URL }}/browse/$ISSUE_KEY" >> $GITHUB_OUTPUT
          else
            echo "Failed to create Jira issue. API response:"
            echo "$RESPONSE"
            
            # Extract HTTP status code for better error diagnosis
            HTTP_STATUS=$(echo "$RESPONSE" | grep -oE "^HTTP/[0-9.]+ [0-9]+" | awk '{print $2}')
            if [ -n "$HTTP_STATUS" ]; then
              echo "HTTP Status Code: $HTTP_STATUS"
              
              if [ "$HTTP_STATUS" = "404" ]; then
                echo "Error: API endpoint not found. Please check JIRA_BASE_URL configuration."
              elif [ "$HTTP_STATUS" = "401" ]; then
                echo "Error: Authentication failed. Please check JIRA_USER_EMAIL and JIRA_API_TOKEN."
              elif [ "$HTTP_STATUS" = "403" ]; then
                echo "Error: Permission denied. Please check user permissions."
              fi
            fi
            
            # Print payload for debugging (with sensitive data redacted)
            echo "Request payload (redacted):"
            echo "$PAYLOAD" | sed 's/"key":"[^"]*"/"key":"***"/g'
            
            exit 1
          fi

      - name: üì¢ Report Issue Creation
        if: steps.create_jira_issue.outputs.issue_key
        run: |
          cd ${{ inputs.working_directory || '.' }} && \
          echo "Created Jira issue: ${{ steps.create_jira_issue.outputs.issue_key }}"
          echo "Issue URL: ${{ steps.create_jira_issue.outputs.issue_url }}"
