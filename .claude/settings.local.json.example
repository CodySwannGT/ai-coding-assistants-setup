{
  "env": {
    "BRAVE_API_KEY": "xxxxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "FIRECRAWL_API_KEY": "xxxxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "GITHUB_PERSONAL_ACCESS_TOKEN": "xxxxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "CONTEXT7_API_KEY": "xxxxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
    "MEMORY_PATH": ".ai/memory.jsonl"
  },
  "permissions": {
    "allow": [
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git rm:*)",
      "Bash(grep:*)",
      "Bash(ls:*)",
      "Bash(mkdir:*)",
      "Bash(mv:*)",
      "Bash(npm run build:*)",
      "Bash(npm run lint)",
      "Bash(npm run test:*)",
      "Bash(npm run typecheck:*)",
      "Bash(npm test)",
      "Bash(npx jest:*)",
      "Bash(npx tsc:*)",
      "Bash(rm:*)",
      "Bash(sed:*)",
      "WebFetch(domain:docs.aws.amazon.com)",
      "WebFetch(domain:github.com)",
      "mcp__jira__jira_get_agile_boards",
      "mcp__jira__jira_search",
      "mcp__jira__jira_create_issue",
      "mcp__jira__jira_get_issue",
      "mcp__jira__jira_update_issue",
      "mcp__taskmaster-ai__initialize_project",
      "mcp__taskmaster-ai__parse_prd",
      "mcp__taskmaster-ai__generate",
      "mcp__taskmaster-ai__get_tasks",
      "mcp__taskmaster-ai__set_task_status",
      "Bash(npm run:*)",
      "Bash(npm test:*)",
      "Bash(npx cdk:*)",
      "mcp__fetch__fetch",
      "Bash(find:*)",
      "Bash(git checkout:*)",
      "Bash(npm install:*)",
      "mcp__jira__jira_search_fields",
      "mcp__taskmaster-ai__add_task",
      "mcp__taskmaster-ai__add_dependency",
      "mcp__taskmaster-ai__expand_task",
      "mcp__taskmaster-ai__update_task",
      "mcp__aws-documentation-mcp-server__search_documentation",
      "mcp__aws-documentation-mcp-server__read_documentation",
      "mcp__brave-search__brave_web_search",
      "mcp__context7__resolve-library-id",
      "mcp__jira__jira_add_comment",
      "Bash(cat:*)",
      "mcp__context7__get-library-docs",
      "mcp__taskmaster-ai__get_task",
      "Bash(npx eslint:*)",
      "Bash(eslint:*)",
      "Bash(npx prettier:*)",
      "Bash(NODE_ENV=test npx jest --config jest.config.ts __tests__/lib/database/postgresConnection.test.ts)",
      "Bash(NODE_ENV=test npx jest --config jest.config.ts)",
      "Bash(NODE_ENV=test npx jest --config jest.config.ts __tests__/lambdas/batch-processor.test.ts)",
      "Bash(NODE_ENV=test npx jest --config jest.config.ts -u __tests__/infra/langgraph-runner-stack.test.ts)",
      "Bash(NODE_ENV=test npm run test)",
      "mcp__taskmaster-ai__add_subtask",
      "mcp__taskmaster-ai__update_subtask",
      "mcp__context7-mcp__resolve-library-id",
      "Bash(npx esbuild:*)",
      "mcp__filesystem__create_directory",
      "mcp__memory__read_graph",
      "mcp__memory__search_nodes",
      "mcp__memory__create_entities",
      "mcp__memory__create_relations",
      "Bash(git clean:*)",
      "Bash(docker system prune:*)",
      "Bash(node:*)",
      "Bash(npm view:*)",
      "Bash(aws cloudformation describe-stack-events:*)",
      "Bash(aws logs describe-log-groups:*)",
      "Bash(aws logs tail:*)",
      "Bash(aws lambda list-functions:*)",
      "Bash(aws cloudformation list-stacks:*)",
      "Bash(aws cloudformation:*)",
      "Bash(aws sqs get-queue-attributes:*)",
      "Bash(aws sqs purge-queue:*)",
      "Bash(aws s3 ls:*)",
      "Bash(chmod:*)",
      "Bash(aws cloudwatch list-dashboards:*)",
      "Bash(aws cloudwatch describe-alarms:*)",
      "Bash(aws lambda get-function:*)",
      "Bash(aws events describe-rule:*)",
      "Bash(aws s3 cp:*)",
      "Bash(aws s3 rm:*)",
      "Bash(aws logs:*)",
      "Bash(aws iam list-role-policies:*)",
      "Bash(aws:*)",
      "Bash(npm search:*)",
      "Bash(awk:*)",
      "Bash(--stack-name dev-LangGraphRunnerStack )",
      "Bash(--query 'Stacks[0].Outputs[*].[OutputKey,OutputValue]' )",
      "Bash(--output table )",
      "Bash(--profile gemini-dev-v2)",
      "Bash(--function-name dev-LangGraphRunnerStack-LangGraphRunnerLambdaD63D-J2Evjq7mKH8X )",
      "Bash(--query 'Environment.Variables.DB_CLUSTER_ARN' --output text)",
      "mcp__memory__add_observations",
      "Bash(npm audit:*)",
      "Bash(brew install:*)",
      "Bash(actionlint:*)",
      "Bash(pip install:*)",
      "Bash(pip3 install:*)"
    ],
    "deny": []
  },
  "enableAllProjectMcpServers": true
}
