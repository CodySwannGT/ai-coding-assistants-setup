name: Release and Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "dev"
        type: choice
        options:
          - main

jobs:
  # Environment setup
  determine_environment:
    name: Determine Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
    steps:
      - name: Set environment
        id: env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "environment=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

  # Version bumping and release creation
  version_and_release:
    name: Version and Release
    needs: [determine_environment]
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    outputs:
      version: ${{ steps.version.outputs.new_version }}
      tag: ${{ steps.version.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT }}
      - uses: actions/setup-node@v4
        with:
          node-version: "20.18.0"
      - run: npm ci
      - name: Configure Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
      - name: Bump version
        id: version
        run: |
          npx standard-version --message "chore(release): %s [skip ci]"
          echo "new_version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
          # Add environment suffix for staging and dev, but not for main
          if [ "${{ needs.determine_environment.outputs.environment }}" == "main" ]; then
            echo "tag=v$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
          else
            echo "tag=v$(node -p "require('./package.json').version")-${{ needs.determine_environment.outputs.environment }}" >> $GITHUB_OUTPUT
          fi
      - name: Push changes
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.PAT }}@github.com/${{ github.repository }}
          git push --follow-tags origin ${{ needs.determine_environment.outputs.environment }}
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          generate_release_notes: true
          token: ${{ secrets.PAT }}

  # Publish to npm
  publish_npm:
    name: Publish to npm
    needs: [determine_environment, version_and_release]
    if: ${{ needs.determine_environment.outputs.environment == 'main' && !contains(github.event.head_commit.message, '[skip ci]') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.version_and_release.outputs.tag }}
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.18.0"
          registry-url: "https://registry.npmjs.org"
      - name: Install dependencies
        run: npm ci
      - name: Build package
        run: npm run build
      - name: Check npm token
        id: check-npm-token
        run: |
          if [[ -z "${{ secrets.NPM_TOKEN }}" ]]; then
            echo "NPM_TOKEN is not set, skipping publish"
            echo "has_npm_token=false" >> $GITHUB_OUTPUT
          else
            echo "has_npm_token=true" >> $GITHUB_OUTPUT
          fi
      - name: Publish to npm
        if: steps.check-npm-token.outputs.has_npm_token == 'true'
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Notify on success
        if: steps.check-npm-token.outputs.has_npm_token == 'true'
        run: echo "Successfully published version ${{ needs.version_and_release.outputs.version }} to npm"

  # Create Jira Release

  create-issue-on-failure:
    name: Create Issue on Failure
    needs: [publish_npm]
    if: ${{ failure() && !contains(github.event.head_commit.message, '[skip ci]') }}
    uses: ./.github/workflows/create-issue-on-failure.yml
    with:
      workflow_name: "Version and Release"
    secrets:
      PAT: ${{ secrets.PAT }}
